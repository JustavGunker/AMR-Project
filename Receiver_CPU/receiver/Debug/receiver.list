
test_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045fc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080047dc  080047dc  000057dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048a0  080048a0  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  080048a0  080048a0  000058a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048a8  080048a8  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048a8  080048a8  000058a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048ac  080048ac  000058ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080048b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000060  08004910  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08004910  000062f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e94c  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000209a  00000000  00000000  000149dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  00016a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000924  00000000  00000000  00017658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8bb  00000000  00000000  00017f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef82  00000000  00000000  00035837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8da4  00000000  00000000  000447b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd55d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035ac  00000000  00000000  000fd5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00100b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	080047c4 	.word	0x080047c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	080047c4 	.word	0x080047c4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <LoRa_reset>:
 *      Author: sofus
 */
#include "lore.h"


void LoRa_reset() {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RST_LoRa_Pin, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005be:	f000 ffe1 	bl	8001584 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80005c2:	200a      	movs	r0, #10
 80005c4:	f000 fd56 	bl	8001074 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, RST_LoRa_Pin, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d2:	f000 ffd7 	bl	8001584 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80005d6:	200a      	movs	r0, #10
 80005d8:	f000 fd4c 	bl	8001074 <HAL_Delay>
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <LoRa_write_reg>:

/*
 * Writes byte to LoRa module
 * Syntax: LoRa_write_reg(hspi1, &address, &data)
 */
void LoRa_write_reg(SPI_HandleTypeDef* spi, uint8_t address, uint8_t data) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	70fb      	strb	r3, [r7, #3]
 80005ec:	4613      	mov	r3, r2
 80005ee:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[2] = {address | 0x80,data};
 80005f0:	78fb      	ldrb	r3, [r7, #3]
 80005f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	733b      	strb	r3, [r7, #12]
 80005fa:	78bb      	ldrb	r3, [r7, #2]
 80005fc:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(GPIOA, CS_LoRa_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2110      	movs	r1, #16
 8000602:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000606:	f000 ffbd 	bl	8001584 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(spi, tx, 2, HAL_MAX_DELAY);
 800060a:	f107 010c 	add.w	r1, r7, #12
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	2202      	movs	r2, #2
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f002 f84a 	bl	80026ae <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOA, CS_LoRa_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	2110      	movs	r1, #16
 800061e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000622:	f000 ffaf 	bl	8001584 <HAL_GPIO_WritePin>
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <LoRa_read_reg>:

/*
 * Read byte from LoRa module and returns value
 * Syntax: x = LoRa_read_reg(hspi1, address)
 */
uint8_t LoRa_read_reg(SPI_HandleTypeDef* spi, uint8_t address) {
 800062e:	b580      	push	{r7, lr}
 8000630:	b086      	sub	sp, #24
 8000632:	af02      	add	r7, sp, #8
 8000634:	6078      	str	r0, [r7, #4]
 8000636:	460b      	mov	r3, r1
 8000638:	70fb      	strb	r3, [r7, #3]
	uint8_t txData[2] = {address, 0};
 800063a:	78fb      	ldrb	r3, [r7, #3]
 800063c:	733b      	strb	r3, [r7, #12]
 800063e:	2300      	movs	r3, #0
 8000640:	737b      	strb	r3, [r7, #13]
	uint8_t rxData[2] = {0, 0};
 8000642:	2300      	movs	r3, #0
 8000644:	813b      	strh	r3, [r7, #8]
	uint8_t data;

	HAL_GPIO_WritePin(GPIOA, CS_LoRa_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2110      	movs	r1, #16
 800064a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800064e:	f000 ff99 	bl	8001584 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000652:	200a      	movs	r0, #10
 8000654:	f000 fd0e 	bl	8001074 <HAL_Delay>

	HAL_SPI_TransmitReceive(spi, txData, rxData, 2, HAL_MAX_DELAY);
 8000658:	f107 0208 	add.w	r2, r7, #8
 800065c:	f107 010c 	add.w	r1, r7, #12
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2302      	movs	r3, #2
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f002 f995 	bl	8002998 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(GPIOA, CS_LoRa_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2110      	movs	r1, #16
 8000672:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000676:	f000 ff85 	bl	8001584 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800067a:	200a      	movs	r0, #10
 800067c:	f000 fcfa 	bl	8001074 <HAL_Delay>
	data = rxData[1];
 8000680:	7a7b      	ldrb	r3, [r7, #9]
 8000682:	73fb      	strb	r3, [r7, #15]

	return data;
 8000684:	7bfb      	ldrb	r3, [r7, #15]
}
 8000686:	4618      	mov	r0, r3
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <LoRa_set_mode>:
}

/*
 * Sets device modes. See header for different modes
 */
void LoRa_set_mode(SPI_HandleTypeDef* spi, int8_t mode) {
 800068e:	b580      	push	{r7, lr}
 8000690:	b084      	sub	sp, #16
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	460b      	mov	r3, r1
 8000698:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(GPIOA,RX_Pin,GPIO_PIN_SET);
		HAL_Delay(500);
	}
	HAL_Delay(500);*/

	addr = RegOpMode;
 800069a:	2301      	movs	r3, #1
 800069c:	73fb      	strb	r3, [r7, #15]
	read = LoRa_read_reg(spi, addr);
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	4619      	mov	r1, r3
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff ffc3 	bl	800062e <LoRa_read_reg>
 80006a8:	4603      	mov	r3, r0
 80006aa:	73bb      	strb	r3, [r7, #14]

	data = (read & 0xF8) | mode;
 80006ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006b0:	f023 0307 	bic.w	r3, r3, #7
 80006b4:	b25a      	sxtb	r2, r3
 80006b6:	78fb      	ldrb	r3, [r7, #3]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	737b      	strb	r3, [r7, #13]

	LoRa_write_reg(spi, addr, data);
 80006be:	7b7a      	ldrb	r2, [r7, #13]
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	4619      	mov	r1, r3
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff ff8b 	bl	80005e0 <LoRa_write_reg>
}
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <LoRa_init>:

/*
 * Initialization of LoRa module. Sleep mode -> LoRa mode -> Stdby mode
 */
void LoRa_init(SPI_HandleTypeDef* spi) {
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b084      	sub	sp, #16
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
	uint8_t addr = RegOpMode;
 80006da:	2301      	movs	r3, #1
 80006dc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;
	uint8_t read;
	uint8_t ptrBase;

	LoRa_write_reg(spi,RegFiFoTxBaseAddr,0x00);
 80006de:	2200      	movs	r2, #0
 80006e0:	210e      	movs	r1, #14
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff ff7c 	bl	80005e0 <LoRa_write_reg>
	ptrBase = LoRa_read_reg(spi,RegFiFoTxBaseAddr);
 80006e8:	210e      	movs	r1, #14
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f7ff ff9f 	bl	800062e <LoRa_read_reg>
 80006f0:	4603      	mov	r3, r0
 80006f2:	73bb      	strb	r3, [r7, #14]
	LoRa_write_reg(spi,RegFiFoAddPtr,ptrBase); // Change FiFo pointer to FiFo base adress
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	461a      	mov	r2, r3
 80006f8:	210d      	movs	r1, #13
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff ff70 	bl	80005e0 <LoRa_write_reg>



	LoRa_set_mode(spi, sleep_mode);
 8000700:	2100      	movs	r1, #0
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff ffc3 	bl	800068e <LoRa_set_mode>
	HAL_Delay(10);
 8000708:	200a      	movs	r0, #10
 800070a:	f000 fcb3 	bl	8001074 <HAL_Delay>


	//enter LoRa mode
	data = (LoRa_read_reg(spi, addr)) | 0x80; //set bit 7 to 1;
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	4619      	mov	r1, r3
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff ff8b 	bl	800062e <LoRa_read_reg>
 8000718:	4603      	mov	r3, r0
 800071a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800071e:	737b      	strb	r3, [r7, #13]
	LoRa_write_reg(spi, addr, data);
 8000720:	7b7a      	ldrb	r2, [r7, #13]
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	4619      	mov	r1, r3
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ff5a 	bl	80005e0 <LoRa_write_reg>
	HAL_Delay(10);
 800072c:	200a      	movs	r0, #10
 800072e:	f000 fca1 	bl	8001074 <HAL_Delay>

	LoRa_set_mode(spi, stdby_mode);
 8000732:	2101      	movs	r1, #1
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ffaa 	bl	800068e <LoRa_set_mode>
	HAL_Delay(10);
 800073a:	200a      	movs	r0, #10
 800073c:	f000 fc9a 	bl	8001074 <HAL_Delay>

	//set frequency
	LoRa_write_reg(spi, RegFrMsb, 0xD9);
 8000740:	22d9      	movs	r2, #217	@ 0xd9
 8000742:	2106      	movs	r1, #6
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff ff4b 	bl	80005e0 <LoRa_write_reg>
	LoRa_write_reg(spi, RegFrMid, 0x00);
 800074a:	2200      	movs	r2, #0
 800074c:	2107      	movs	r1, #7
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff ff46 	bl	80005e0 <LoRa_write_reg>
	LoRa_write_reg(spi, RegFrLsb, 0x00);
 8000754:	2200      	movs	r2, #0
 8000756:	2108      	movs	r1, #8
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff41 	bl	80005e0 <LoRa_write_reg>

	//crc
	read = LoRa_read_reg(spi, RegModemConfig1) | 0x02;
 800075e:	211d      	movs	r1, #29
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff64 	bl	800062e <LoRa_read_reg>
 8000766:	4603      	mov	r3, r0
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	733b      	strb	r3, [r7, #12]
	LoRa_write_reg(spi, RegModemConfig1, read);
 800076e:	7b3b      	ldrb	r3, [r7, #12]
 8000770:	461a      	mov	r2, r3
 8000772:	211d      	movs	r1, #29
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff33 	bl	80005e0 <LoRa_write_reg>
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <LoRa_read_payload>:

void LoRa_read_payload(SPI_HandleTypeDef* spi, char *data) {
 8000782:	b590      	push	{r4, r7, lr}
 8000784:	b087      	sub	sp, #28
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6039      	str	r1, [r7, #0]
	uint8_t irqReg, nBytes, FIFOaddr, i, RxDone, validHeader;

	irqReg = LoRa_read_reg(spi, 0x12);
 800078c:	2112      	movs	r1, #18
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff ff4d 	bl	800062e <LoRa_read_reg>
 8000794:	4603      	mov	r3, r0
 8000796:	75bb      	strb	r3, [r7, #22]
	RxDone, validHeader = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	757b      	strb	r3, [r7, #21]
	irqReg = LoRa_read_reg(spi, 0x12);
 800079c:	2112      	movs	r1, #18
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ff45 	bl	800062e <LoRa_read_reg>
 80007a4:	4603      	mov	r3, r0
 80007a6:	75bb      	strb	r3, [r7, #22]
	RxDone = irqReg & 0x40;
 80007a8:	7dbb      	ldrb	r3, [r7, #22]
 80007aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007ae:	753b      	strb	r3, [r7, #20]

	if (RxDone) {
 80007b0:	7d3b      	ldrb	r3, [r7, #20]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d06c      	beq.n	8000890 <LoRa_read_payload+0x10e>
		LoRa_write_reg(spi, 0x12, irqReg & 0x40);
 80007b6:	7dbb      	ldrb	r3, [r7, #22]
 80007b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	461a      	mov	r2, r3
 80007c0:	2112      	movs	r1, #18
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ff0c 	bl	80005e0 <LoRa_write_reg>
		irqReg = LoRa_read_reg(spi, 0x12);
 80007c8:	2112      	movs	r1, #18
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ff2f 	bl	800062e <LoRa_read_reg>
 80007d0:	4603      	mov	r3, r0
 80007d2:	75bb      	strb	r3, [r7, #22]
		validHeader = irqReg & 0x10;
 80007d4:	7dbb      	ldrb	r3, [r7, #22]
 80007d6:	f003 0310 	and.w	r3, r3, #16
 80007da:	757b      	strb	r3, [r7, #21]

		if (validHeader) {
 80007dc:	7d7b      	ldrb	r3, [r7, #21]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d056      	beq.n	8000890 <LoRa_read_payload+0x10e>
			if (irqReg & 0x20) {
 80007e2:	7dbb      	ldrb	r3, [r7, #22]
 80007e4:	f003 0320 	and.w	r3, r3, #32
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d009      	beq.n	8000800 <LoRa_read_payload+0x7e>
				LoRa_write_reg(spi, 0x12, irqReg & 0x20);
 80007ec:	7dbb      	ldrb	r3, [r7, #22]
 80007ee:	f003 0320 	and.w	r3, r3, #32
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	461a      	mov	r2, r3
 80007f6:	2112      	movs	r1, #18
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff fef1 	bl	80005e0 <LoRa_write_reg>
				return "CRC error";
 80007fe:	e047      	b.n	8000890 <LoRa_read_payload+0x10e>
			}

			LoRa_write_reg(spi, 0x12, irqReg & 0x10);
 8000800:	7dbb      	ldrb	r3, [r7, #22]
 8000802:	f003 0310 	and.w	r3, r3, #16
 8000806:	b2db      	uxtb	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	2112      	movs	r1, #18
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff fee7 	bl	80005e0 <LoRa_write_reg>

			irqReg = LoRa_read_reg(spi, 0x12);
 8000812:	2112      	movs	r1, #18
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff ff0a 	bl	800062e <LoRa_read_reg>
 800081a:	4603      	mov	r3, r0
 800081c:	75bb      	strb	r3, [r7, #22]

			nBytes = LoRa_read_reg(spi, 0x13);
 800081e:	2113      	movs	r1, #19
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff04 	bl	800062e <LoRa_read_reg>
 8000826:	4603      	mov	r3, r0
 8000828:	74fb      	strb	r3, [r7, #19]

			FIFOaddr = LoRa_read_reg(spi, 0x10);
 800082a:	2110      	movs	r1, #16
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff fefe 	bl	800062e <LoRa_read_reg>
 8000832:	4603      	mov	r3, r0
 8000834:	74bb      	strb	r3, [r7, #18]

			char *data_reg = (char *)malloc(nBytes*sizeof(char));
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	4618      	mov	r0, r3
 800083a:	f003 faff 	bl	8003e3c <malloc>
 800083e:	4603      	mov	r3, r0
 8000840:	60fb      	str	r3, [r7, #12]

			LoRa_write_reg(spi, 0x0D, FIFOaddr);
 8000842:	7cbb      	ldrb	r3, [r7, #18]
 8000844:	461a      	mov	r2, r3
 8000846:	210d      	movs	r1, #13
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff fec9 	bl	80005e0 <LoRa_write_reg>

			for (i = 0; i < nBytes; i++) {
 800084e:	2300      	movs	r3, #0
 8000850:	75fb      	strb	r3, [r7, #23]
 8000852:	e00b      	b.n	800086c <LoRa_read_payload+0xea>
				data_reg[i] = LoRa_read_reg(spi, 0x00);
 8000854:	7dfb      	ldrb	r3, [r7, #23]
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	18d4      	adds	r4, r2, r3
 800085a:	2100      	movs	r1, #0
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff fee6 	bl	800062e <LoRa_read_reg>
 8000862:	4603      	mov	r3, r0
 8000864:	7023      	strb	r3, [r4, #0]
			for (i = 0; i < nBytes; i++) {
 8000866:	7dfb      	ldrb	r3, [r7, #23]
 8000868:	3301      	adds	r3, #1
 800086a:	75fb      	strb	r3, [r7, #23]
 800086c:	7dfa      	ldrb	r2, [r7, #23]
 800086e:	7cfb      	ldrb	r3, [r7, #19]
 8000870:	429a      	cmp	r2, r3
 8000872:	d3ef      	bcc.n	8000854 <LoRa_read_payload+0xd2>
			}

			strncpy(data,data_reg, nBytes);
 8000874:	7cfb      	ldrb	r3, [r7, #19]
 8000876:	461a      	mov	r2, r3
 8000878:	68f9      	ldr	r1, [r7, #12]
 800087a:	6838      	ldr	r0, [r7, #0]
 800087c:	f003 fbc4 	bl	8004008 <strncpy>
			data[nBytes] = '\0';
 8000880:	7cfb      	ldrb	r3, [r7, #19]
 8000882:	683a      	ldr	r2, [r7, #0]
 8000884:	4413      	add	r3, r2
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]

			free(data_reg);
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f003 fade 	bl	8003e4c <free>

		}
	}

}
 8000890:	371c      	adds	r7, #28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd90      	pop	{r4, r7, pc}
	...

08000898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b0ce      	sub	sp, #312	@ 0x138
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089e:	f000 fb78 	bl	8000f92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a2:	f000 f8b1 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a6:	f000 f979 	bl	8000b9c <MX_GPIO_Init>
  MX_SPI1_Init();
 80008aa:	f000 f8ed 	bl	8000a88 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80008ae:	f000 f929 	bl	8000b04 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char send_data[200];
  uint8_t rx, rx1, rx2, rx_flag, reg_value, send_it, cnt = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  uint8_t tx, tx1 = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
  uint8_t addr, addr2, addr3 = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135
  uint8_t mode;

  char data_read[100];

  uint8_t uart_buf_len = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f887 3134 	strb.w	r3, [r7, #308]	@ 0x134

  HAL_GPIO_WritePin(GPIOA, RST_LoRa_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d4:	f000 fe56 	bl	8001584 <HAL_GPIO_WritePin>
  LoRa_reset();
 80008d8:	f7ff fe6a 	bl	80005b0 <LoRa_reset>


  clrscr();
 80008dc:	f000 f9a4 	bl	8000c28 <clrscr>
  gotoxy(0,0);
 80008e0:	2100      	movs	r1, #0
 80008e2:	2000      	movs	r0, #0
 80008e4:	f000 f9c2 	bl	8000c6c <gotoxy>

  LoRa_init(&hspi1);
 80008e8:	4843      	ldr	r0, [pc, #268]	@ (80009f8 <main+0x160>)
 80008ea:	f7ff fef2 	bl	80006d2 <LoRa_init>

  HAL_GPIO_WritePin(GPIOA, TX_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f8:	f000 fe44 	bl	8001584 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, RX_Pin, GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000902:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000906:	f000 fe3d 	bl	8001584 <HAL_GPIO_WritePin>

  LoRa_write_reg(&hspi1, RegFiFoTxBaseAddr, 0x00);
 800090a:	2200      	movs	r2, #0
 800090c:	210e      	movs	r1, #14
 800090e:	483a      	ldr	r0, [pc, #232]	@ (80009f8 <main+0x160>)
 8000910:	f7ff fe66 	bl	80005e0 <LoRa_write_reg>
  HAL_Delay(10);
 8000914:	200a      	movs	r0, #10
 8000916:	f000 fbad 	bl	8001074 <HAL_Delay>

  //LoRa_fill_fifo(&hspi1, text, strlen(text));

  LoRa_set_mode(&hspi1, rx_cont_mode);
 800091a:	2105      	movs	r1, #5
 800091c:	4836      	ldr	r0, [pc, #216]	@ (80009f8 <main+0x160>)
 800091e:	f7ff feb6 	bl	800068e <LoRa_set_mode>
  mode = 1;
 8000922:	2301      	movs	r3, #1
 8000924:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  gotoxy(0,0);
 8000928:	2100      	movs	r1, #0
 800092a:	2000      	movs	r0, #0
 800092c:	f000 f99e 	bl	8000c6c <gotoxy>
		  HAL_Delay(10);
	  }*/


	  //LoRa receive and print
	  rx = (LoRa_read_reg(&hspi1, RegIrqFlags) & 0x40) >> 6;
 8000930:	2112      	movs	r1, #18
 8000932:	4831      	ldr	r0, [pc, #196]	@ (80009f8 <main+0x160>)
 8000934:	f7ff fe7b 	bl	800062e <LoRa_read_reg>
 8000938:	4603      	mov	r3, r0
 800093a:	119b      	asrs	r3, r3, #6
 800093c:	b2db      	uxtb	r3, r3
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	f887 3132 	strb.w	r3, [r7, #306]	@ 0x132

	  rx1 = LoRa_read_reg(&hspi1, RegRxNbBytes);
 8000946:	2113      	movs	r1, #19
 8000948:	482b      	ldr	r0, [pc, #172]	@ (80009f8 <main+0x160>)
 800094a:	f7ff fe70 	bl	800062e <LoRa_read_reg>
 800094e:	4603      	mov	r3, r0
 8000950:	f887 3131 	strb.w	r3, [r7, #305]	@ 0x131
	  rx2 = LoRa_read_reg(&hspi1, RegOpMode);
 8000954:	2101      	movs	r1, #1
 8000956:	4828      	ldr	r0, [pc, #160]	@ (80009f8 <main+0x160>)
 8000958:	f7ff fe69 	bl	800062e <LoRa_read_reg>
 800095c:	4603      	mov	r3, r0
 800095e:	f887 3130 	strb.w	r3, [r7, #304]	@ 0x130

	  uart_buf_len = sprintf(send_data, "Waiting, RegOpMode: %d, cnt: %.4d\n\r", rx2, cnt);
 8000962:	f897 2130 	ldrb.w	r2, [r7, #304]	@ 0x130
 8000966:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800096a:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800096e:	4923      	ldr	r1, [pc, #140]	@ (80009fc <main+0x164>)
 8000970:	f003 fb22 	bl	8003fb8 <siprintf>
 8000974:	4603      	mov	r3, r0
 8000976:	f887 3134 	strb.w	r3, [r7, #308]	@ 0x134
	  HAL_UART_Transmit(&huart2, (uint8_t*)send_data, uart_buf_len, 500);
 800097a:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 800097e:	b29a      	uxth	r2, r3
 8000980:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8000984:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000988:	481d      	ldr	r0, [pc, #116]	@ (8000a00 <main+0x168>)
 800098a:	f002 fbdb 	bl	8003144 <HAL_UART_Transmit>

	  if (rx) {
 800098e:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 8000992:	2b00      	cmp	r3, #0
 8000994:	d029      	beq.n	80009ea <main+0x152>
		  LoRa_read_payload(&hspi1, data_read);
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	4619      	mov	r1, r3
 800099a:	4817      	ldr	r0, [pc, #92]	@ (80009f8 <main+0x160>)
 800099c:	f7ff fef1 	bl	8000782 <LoRa_read_payload>
		  clrscr();
 80009a0:	f000 f942 	bl	8000c28 <clrscr>
		  uart_buf_len = sprintf(send_data, "Payload:\n\r%s\n\rbytes: %d", data_read, rx1);
 80009a4:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 80009a8:	1d3a      	adds	r2, r7, #4
 80009aa:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80009ae:	4915      	ldr	r1, [pc, #84]	@ (8000a04 <main+0x16c>)
 80009b0:	f003 fb02 	bl	8003fb8 <siprintf>
 80009b4:	4603      	mov	r3, r0
 80009b6:	f887 3134 	strb.w	r3, [r7, #308]	@ 0x134
		  HAL_UART_Transmit(&huart2, (uint8_t*)send_data, uart_buf_len, 500);
 80009ba:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 80009be:	b29a      	uxth	r2, r3
 80009c0:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80009c4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80009c8:	480d      	ldr	r0, [pc, #52]	@ (8000a00 <main+0x168>)
 80009ca:	f002 fbbb 	bl	8003144 <HAL_UART_Transmit>
		  LoRa_set_mode(&hspi1, sleep_mode);
 80009ce:	2100      	movs	r1, #0
 80009d0:	4809      	ldr	r0, [pc, #36]	@ (80009f8 <main+0x160>)
 80009d2:	f7ff fe5c 	bl	800068e <LoRa_set_mode>
		  HAL_Delay(10);
 80009d6:	200a      	movs	r0, #10
 80009d8:	f000 fb4c 	bl	8001074 <HAL_Delay>
		  LoRa_set_mode(&hspi1, rx_cont_mode);
 80009dc:	2105      	movs	r1, #5
 80009de:	4806      	ldr	r0, [pc, #24]	@ (80009f8 <main+0x160>)
 80009e0:	f7ff fe55 	bl	800068e <LoRa_set_mode>
		  cnt = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
	  }

	  cnt++;
 80009ea:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80009ee:	3301      	adds	r3, #1
 80009f0:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
	  gotoxy(0,0);
 80009f4:	e798      	b.n	8000928 <main+0x90>
 80009f6:	bf00      	nop
 80009f8:	2000007c 	.word	0x2000007c
 80009fc:	080047dc 	.word	0x080047dc
 8000a00:	200000e0 	.word	0x200000e0
 8000a04:	08004800 	.word	0x08004800

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b094      	sub	sp, #80	@ 0x50
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0318 	add.w	r3, r7, #24
 8000a12:	2238      	movs	r2, #56	@ 0x38
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f003 faee 	bl	8003ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a2a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a2e:	f000 fdc1 	bl	80015b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3c:	2340      	movs	r3, #64	@ 0x40
 8000a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a44:	f107 0318 	add.w	r3, r7, #24
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 fe67 	bl	800171c <HAL_RCC_OscConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a54:	f000 f938 	bl	8000cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a58:	230f      	movs	r3, #15
 8000a5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 f965 	bl	8001d40 <HAL_RCC_ClockConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a7c:	f000 f924 	bl	8000cc8 <Error_Handler>
  }
}
 8000a80:	bf00      	nop
 8000a82:	3750      	adds	r7, #80	@ 0x50
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b00 <MX_SPI1_Init+0x78>)
 8000a90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000a94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aa0:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000aa2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000aa6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aae:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000abe:	2218      	movs	r2, #24
 8000ac0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000ad6:	2207      	movs	r2, #7
 8000ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000ae8:	f001 fd36 	bl	8002558 <HAL_SPI_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000af2:	f000 f8e9 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000007c 	.word	0x2000007c
 8000b00:	40013000 	.word	0x40013000

08000b04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b08:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b0a:	4a23      	ldr	r2, [pc, #140]	@ (8000b98 <MX_USART2_UART_Init+0x94>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b40:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b46:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b4c:	4811      	ldr	r0, [pc, #68]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b4e:	f002 faa9 	bl	80030a4 <HAL_UART_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b58:	f000 f8b6 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	480d      	ldr	r0, [pc, #52]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b60:	f003 f8a2 	bl	8003ca8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b6a:	f000 f8ad 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4808      	ldr	r0, [pc, #32]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b72:	f003 f8d7 	bl	8003d24 <HAL_UARTEx_SetRxFifoThreshold>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b7c:	f000 f8a4 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b80:	4804      	ldr	r0, [pc, #16]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b82:	f003 f858 	bl	8003c36 <HAL_UARTEx_DisableFifoMode>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b8c:	f000 f89c 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200000e0 	.word	0x200000e0
 8000b98:	40004400 	.word	0x40004400

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c24 <MX_GPIO_Init+0x88>)
 8000bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c24 <MX_GPIO_Init+0x88>)
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bbc:	4b19      	ldr	r3, [pc, #100]	@ (8000c24 <MX_GPIO_Init+0x88>)
 8000bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LoRa_GPIO_Port, CS_LoRa_Pin, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2110      	movs	r1, #16
 8000bcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd0:	f000 fcd8 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TX_Pin|RST_LoRa_Pin|RX_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 5198 	mov.w	r1, #4864	@ 0x1300
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bde:	f000 fcd1 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_LoRa_Pin TX_Pin RST_LoRa_Pin RX_Pin */
  GPIO_InitStruct.Pin = CS_LoRa_Pin|TX_Pin|RST_LoRa_Pin|RX_Pin;
 8000be2:	f241 3310 	movw	r3, #4880	@ 0x1310
 8000be6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bfc:	f000 fb40 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000c00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c06:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	4619      	mov	r1, r3
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c18:	f000 fb32 	bl	8001280 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c1c:	bf00      	nop
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40021000 	.word	0x40021000

08000c28 <clrscr>:

/* USER CODE BEGIN 4 */

void clrscr() {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	uart_buf_len = sprintf(uart_buf, "%c[2J", ESC);
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <clrscr+0x30>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	490a      	ldr	r1, [pc, #40]	@ (8000c5c <clrscr+0x34>)
 8000c34:	480a      	ldr	r0, [pc, #40]	@ (8000c60 <clrscr+0x38>)
 8000c36:	f003 f9bf 	bl	8003fb8 <siprintf>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <clrscr+0x3c>)
 8000c40:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000c42:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <clrscr+0x3c>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	2364      	movs	r3, #100	@ 0x64
 8000c4a:	4905      	ldr	r1, [pc, #20]	@ (8000c60 <clrscr+0x38>)
 8000c4c:	4806      	ldr	r0, [pc, #24]	@ (8000c68 <clrscr+0x40>)
 8000c4e:	f002 fa79 	bl	8003144 <HAL_UART_Transmit>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	08004818 	.word	0x08004818
 8000c60:	20000174 	.word	0x20000174
 8000c64:	200001a6 	.word	0x200001a6
 8000c68:	200000e0 	.word	0x200000e0

08000c6c <gotoxy>:

void gotoxy(uint8_t x, uint8_t y) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af02      	add	r7, sp, #8
 8000c72:	4603      	mov	r3, r0
 8000c74:	460a      	mov	r2, r1
 8000c76:	71fb      	strb	r3, [r7, #7]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	71bb      	strb	r3, [r7, #6]
	uart_buf_len = sprintf(uart_buf, "%c[%d;%dH", ESC, y + 1, x + 1);
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb4 <gotoxy+0x48>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	79bb      	ldrb	r3, [r7, #6]
 8000c82:	1c59      	adds	r1, r3, #1
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	3301      	adds	r3, #1
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	490a      	ldr	r1, [pc, #40]	@ (8000cb8 <gotoxy+0x4c>)
 8000c8e:	480b      	ldr	r0, [pc, #44]	@ (8000cbc <gotoxy+0x50>)
 8000c90:	f003 f992 	bl	8003fb8 <siprintf>
 8000c94:	4603      	mov	r3, r0
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <gotoxy+0x54>)
 8000c9a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000c9c:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <gotoxy+0x54>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	2364      	movs	r3, #100	@ 0x64
 8000ca4:	4905      	ldr	r1, [pc, #20]	@ (8000cbc <gotoxy+0x50>)
 8000ca6:	4807      	ldr	r0, [pc, #28]	@ (8000cc4 <gotoxy+0x58>)
 8000ca8:	f002 fa4c 	bl	8003144 <HAL_UART_Transmit>
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	08004820 	.word	0x08004820
 8000cbc:	20000174 	.word	0x20000174
 8000cc0:	200001a6 	.word	0x200001a6
 8000cc4:	200000e0 	.word	0x200000e0

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <Error_Handler+0x8>

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b0f      	ldr	r3, [pc, #60]	@ (8000d18 <HAL_MspInit+0x44>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cde:	4a0e      	ldr	r2, [pc, #56]	@ (8000d18 <HAL_MspInit+0x44>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <HAL_MspInit+0x44>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <HAL_MspInit+0x44>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf6:	4a08      	ldr	r2, [pc, #32]	@ (8000d18 <HAL_MspInit+0x44>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cfe:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_MspInit+0x44>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d0a:	f000 fcf7 	bl	80016fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	@ 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a17      	ldr	r2, [pc, #92]	@ (8000d98 <HAL_SPI_MspInit+0x7c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d128      	bne.n	8000d90 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d3e:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <HAL_SPI_MspInit+0x80>)
 8000d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d42:	4a16      	ldr	r2, [pc, #88]	@ (8000d9c <HAL_SPI_MspInit+0x80>)
 8000d44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d48:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d4a:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <HAL_SPI_MspInit+0x80>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <HAL_SPI_MspInit+0x80>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	4a10      	ldr	r2, [pc, #64]	@ (8000d9c <HAL_SPI_MspInit+0x80>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <HAL_SPI_MspInit+0x80>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d6e:	23e0      	movs	r3, #224	@ 0xe0
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d7e:	2305      	movs	r3, #5
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8c:	f000 fa78 	bl	8001280 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d90:	bf00      	nop
 8000d92:	3728      	adds	r7, #40	@ 0x28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40013000 	.word	0x40013000
 8000d9c:	40021000 	.word	0x40021000

08000da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b09a      	sub	sp, #104	@ 0x68
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	2244      	movs	r2, #68	@ 0x44
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f003 f919 	bl	8003ff8 <memset>
  if(huart->Instance==USART2)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a1f      	ldr	r2, [pc, #124]	@ (8000e48 <HAL_UART_MspInit+0xa8>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d136      	bne.n	8000e3e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 f9cb 	bl	8002178 <HAL_RCCEx_PeriphCLKConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000de8:	f7ff ff6e 	bl	8000cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dec:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <HAL_UART_MspInit+0xac>)
 8000dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df0:	4a16      	ldr	r2, [pc, #88]	@ (8000e4c <HAL_UART_MspInit+0xac>)
 8000df2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000df8:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <HAL_UART_MspInit+0xac>)
 8000dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <HAL_UART_MspInit+0xac>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e08:	4a10      	ldr	r2, [pc, #64]	@ (8000e4c <HAL_UART_MspInit+0xac>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e10:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <HAL_UART_MspInit+0xac>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e1c:	230c      	movs	r3, #12
 8000e1e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e2c:	2307      	movs	r3, #7
 8000e2e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e34:	4619      	mov	r1, r3
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3a:	f000 fa21 	bl	8001280 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3768      	adds	r7, #104	@ 0x68
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40004400 	.word	0x40004400
 8000e4c:	40021000 	.word	0x40021000

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <NMI_Handler+0x4>

08000e58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <MemManage_Handler+0x4>

08000e68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea6:	f000 f8c7 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb8:	4a14      	ldr	r2, [pc, #80]	@ (8000f0c <_sbrk+0x5c>)
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <_sbrk+0x60>)
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec4:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <_sbrk+0x64>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	@ (8000f18 <_sbrk+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed2:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d207      	bcs.n	8000ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee0:	f003 f8b6 	bl	8004050 <__errno>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	e009      	b.n	8000f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	4a05      	ldr	r2, [pc, #20]	@ (8000f14 <_sbrk+0x64>)
 8000f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20008000 	.word	0x20008000
 8000f10:	00000400 	.word	0x00000400
 8000f14:	200001a8 	.word	0x200001a8
 8000f18:	200002f8 	.word	0x200002f8

08000f1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <SystemInit+0x20>)
 8000f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f26:	4a05      	ldr	r2, [pc, #20]	@ (8000f3c <SystemInit+0x20>)
 8000f28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f40:	480d      	ldr	r0, [pc, #52]	@ (8000f78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f42:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f44:	f7ff ffea 	bl	8000f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f48:	480c      	ldr	r0, [pc, #48]	@ (8000f7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4a:	490d      	ldr	r1, [pc, #52]	@ (8000f80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f84 <LoopForever+0xe>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f60:	4c0a      	ldr	r4, [pc, #40]	@ (8000f8c <LoopForever+0x16>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f003 f875 	bl	800405c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f72:	f7ff fc91 	bl	8000898 <main>

08000f76 <LoopForever>:

LoopForever:
    b LoopForever
 8000f76:	e7fe      	b.n	8000f76 <LoopForever>
  ldr   r0, =_estack
 8000f78:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f84:	080048b0 	.word	0x080048b0
  ldr r2, =_sbss
 8000f88:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f8c:	200002f8 	.word	0x200002f8

08000f90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC1_2_IRQHandler>

08000f92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f000 f93d 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f000 f80e 	bl	8000fc4 <HAL_InitTick>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	71fb      	strb	r3, [r7, #7]
 8000fb2:	e001      	b.n	8000fb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb4:	f7ff fe8e 	bl	8000cd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fb8:	79fb      	ldrb	r3, [r7, #7]

}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fd0:	4b16      	ldr	r3, [pc, #88]	@ (800102c <HAL_InitTick+0x68>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d022      	beq.n	800101e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fd8:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <HAL_InitTick+0x6c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b13      	ldr	r3, [pc, #76]	@ (800102c <HAL_InitTick+0x68>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fe4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f93a 	bl	8001266 <HAL_SYSTICK_Config>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10f      	bne.n	8001018 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b0f      	cmp	r3, #15
 8000ffc:	d809      	bhi.n	8001012 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffe:	2200      	movs	r2, #0
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	f04f 30ff 	mov.w	r0, #4294967295
 8001006:	f000 f914 	bl	8001232 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800100a:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <HAL_InitTick+0x70>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	e007      	b.n	8001022 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	e004      	b.n	8001022 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e001      	b.n	8001022 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	2000000c 	.word	0x2000000c
 8001030:	20000004 	.word	0x20000004
 8001034:	20000008 	.word	0x20000008

08001038 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b05      	ldr	r3, [pc, #20]	@ (8001054 <HAL_IncTick+0x1c>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <HAL_IncTick+0x20>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4413      	add	r3, r2
 8001046:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <HAL_IncTick+0x1c>)
 8001048:	6013      	str	r3, [r2, #0]
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	200001ac 	.word	0x200001ac
 8001058:	2000000c 	.word	0x2000000c

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	@ (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	200001ac 	.word	0x200001ac

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff ffee 	bl	800105c <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d004      	beq.n	8001098 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <HAL_Delay+0x40>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	4413      	add	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001098:	bf00      	nop
 800109a:	f7ff ffdf 	bl	800105c <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d8f7      	bhi.n	800109a <HAL_Delay+0x26>
  {
  }
}
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2000000c 	.word	0x2000000c

080010b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	@ (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	@ (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	@ 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	@ 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011e8:	d301      	bcc.n	80011ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00f      	b.n	800120e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001218 <SysTick_Config+0x40>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f6:	210f      	movs	r1, #15
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f7ff ff8e 	bl	800111c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <SysTick_Config+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	@ (8001218 <SysTick_Config+0x40>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff47 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001240:	f7ff ff5e 	bl	8001100 <__NVIC_GetPriorityGrouping>
 8001244:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	6978      	ldr	r0, [r7, #20]
 800124c:	f7ff ff90 	bl	8001170 <NVIC_EncodePriority>
 8001250:	4602      	mov	r2, r0
 8001252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff5f 	bl	800111c <__NVIC_SetPriority>
}
 800125e:	bf00      	nop
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ffb2 	bl	80011d8 <SysTick_Config>
 8001274:	4603      	mov	r3, r0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800128e:	e15a      	b.n	8001546 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	2101      	movs	r1, #1
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	4013      	ands	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 814c 	beq.w	8001540 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d005      	beq.n	80012c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d130      	bne.n	8001322 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012f6:	2201      	movs	r2, #1
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	f003 0201 	and.w	r2, r3, #1
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b03      	cmp	r3, #3
 800132c:	d017      	beq.n	800135e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	2203      	movs	r2, #3
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d123      	bne.n	80013b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	08da      	lsrs	r2, r3, #3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3208      	adds	r2, #8
 8001372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001376:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	220f      	movs	r2, #15
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	08da      	lsrs	r2, r3, #3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3208      	adds	r2, #8
 80013ac:	6939      	ldr	r1, [r7, #16]
 80013ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	2203      	movs	r2, #3
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0203 	and.w	r2, r3, #3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 80a6 	beq.w	8001540 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f4:	4b5b      	ldr	r3, [pc, #364]	@ (8001564 <HAL_GPIO_Init+0x2e4>)
 80013f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f8:	4a5a      	ldr	r2, [pc, #360]	@ (8001564 <HAL_GPIO_Init+0x2e4>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001400:	4b58      	ldr	r3, [pc, #352]	@ (8001564 <HAL_GPIO_Init+0x2e4>)
 8001402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800140c:	4a56      	ldr	r2, [pc, #344]	@ (8001568 <HAL_GPIO_Init+0x2e8>)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	220f      	movs	r2, #15
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001436:	d01f      	beq.n	8001478 <HAL_GPIO_Init+0x1f8>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a4c      	ldr	r2, [pc, #304]	@ (800156c <HAL_GPIO_Init+0x2ec>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d019      	beq.n	8001474 <HAL_GPIO_Init+0x1f4>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a4b      	ldr	r2, [pc, #300]	@ (8001570 <HAL_GPIO_Init+0x2f0>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d013      	beq.n	8001470 <HAL_GPIO_Init+0x1f0>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a4a      	ldr	r2, [pc, #296]	@ (8001574 <HAL_GPIO_Init+0x2f4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d00d      	beq.n	800146c <HAL_GPIO_Init+0x1ec>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a49      	ldr	r2, [pc, #292]	@ (8001578 <HAL_GPIO_Init+0x2f8>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d007      	beq.n	8001468 <HAL_GPIO_Init+0x1e8>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a48      	ldr	r2, [pc, #288]	@ (800157c <HAL_GPIO_Init+0x2fc>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d101      	bne.n	8001464 <HAL_GPIO_Init+0x1e4>
 8001460:	2305      	movs	r3, #5
 8001462:	e00a      	b.n	800147a <HAL_GPIO_Init+0x1fa>
 8001464:	2306      	movs	r3, #6
 8001466:	e008      	b.n	800147a <HAL_GPIO_Init+0x1fa>
 8001468:	2304      	movs	r3, #4
 800146a:	e006      	b.n	800147a <HAL_GPIO_Init+0x1fa>
 800146c:	2303      	movs	r3, #3
 800146e:	e004      	b.n	800147a <HAL_GPIO_Init+0x1fa>
 8001470:	2302      	movs	r3, #2
 8001472:	e002      	b.n	800147a <HAL_GPIO_Init+0x1fa>
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <HAL_GPIO_Init+0x1fa>
 8001478:	2300      	movs	r3, #0
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	f002 0203 	and.w	r2, r2, #3
 8001480:	0092      	lsls	r2, r2, #2
 8001482:	4093      	lsls	r3, r2
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800148a:	4937      	ldr	r1, [pc, #220]	@ (8001568 <HAL_GPIO_Init+0x2e8>)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001498:	4b39      	ldr	r3, [pc, #228]	@ (8001580 <HAL_GPIO_Init+0x300>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014bc:	4a30      	ldr	r2, [pc, #192]	@ (8001580 <HAL_GPIO_Init+0x300>)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001580 <HAL_GPIO_Init+0x300>)
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014e6:	4a26      	ldr	r2, [pc, #152]	@ (8001580 <HAL_GPIO_Init+0x300>)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80014ec:	4b24      	ldr	r3, [pc, #144]	@ (8001580 <HAL_GPIO_Init+0x300>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001510:	4a1b      	ldr	r2, [pc, #108]	@ (8001580 <HAL_GPIO_Init+0x300>)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001516:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <HAL_GPIO_Init+0x300>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800153a:	4a11      	ldr	r2, [pc, #68]	@ (8001580 <HAL_GPIO_Init+0x300>)
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3301      	adds	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	f47f ae9d 	bne.w	8001290 <HAL_GPIO_Init+0x10>
  }
}
 8001556:	bf00      	nop
 8001558:	bf00      	nop
 800155a:	371c      	adds	r7, #28
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40021000 	.word	0x40021000
 8001568:	40010000 	.word	0x40010000
 800156c:	48000400 	.word	0x48000400
 8001570:	48000800 	.word	0x48000800
 8001574:	48000c00 	.word	0x48000c00
 8001578:	48001000 	.word	0x48001000
 800157c:	48001400 	.word	0x48001400
 8001580:	40010400 	.word	0x40010400

08001584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
 8001590:	4613      	mov	r3, r2
 8001592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001594:	787b      	ldrb	r3, [r7, #1]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015a0:	e002      	b.n	80015a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d141      	bne.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015c2:	4b4b      	ldr	r3, [pc, #300]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015ce:	d131      	bne.n	8001634 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015d0:	4b47      	ldr	r3, [pc, #284]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015d6:	4a46      	ldr	r2, [pc, #280]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e0:	4b43      	ldr	r3, [pc, #268]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015e8:	4a41      	ldr	r2, [pc, #260]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015f0:	4b40      	ldr	r3, [pc, #256]	@ (80016f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2232      	movs	r2, #50	@ 0x32
 80015f6:	fb02 f303 	mul.w	r3, r2, r3
 80015fa:	4a3f      	ldr	r2, [pc, #252]	@ (80016f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001600:	0c9b      	lsrs	r3, r3, #18
 8001602:	3301      	adds	r3, #1
 8001604:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001606:	e002      	b.n	800160e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3b01      	subs	r3, #1
 800160c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800160e:	4b38      	ldr	r3, [pc, #224]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800161a:	d102      	bne.n	8001622 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f2      	bne.n	8001608 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001622:	4b33      	ldr	r3, [pc, #204]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800162a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800162e:	d158      	bne.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e057      	b.n	80016e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001634:	4b2e      	ldr	r3, [pc, #184]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800163a:	4a2d      	ldr	r2, [pc, #180]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001640:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001644:	e04d      	b.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800164c:	d141      	bne.n	80016d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800164e:	4b28      	ldr	r3, [pc, #160]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800165a:	d131      	bne.n	80016c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800165c:	4b24      	ldr	r3, [pc, #144]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800165e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001662:	4a23      	ldr	r2, [pc, #140]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001668:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800166c:	4b20      	ldr	r3, [pc, #128]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001674:	4a1e      	ldr	r2, [pc, #120]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001676:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800167a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800167c:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2232      	movs	r2, #50	@ 0x32
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	4a1c      	ldr	r2, [pc, #112]	@ (80016f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001688:	fba2 2303 	umull	r2, r3, r2, r3
 800168c:	0c9b      	lsrs	r3, r3, #18
 800168e:	3301      	adds	r3, #1
 8001690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001692:	e002      	b.n	800169a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3b01      	subs	r3, #1
 8001698:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016a6:	d102      	bne.n	80016ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f2      	bne.n	8001694 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ae:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016ba:	d112      	bne.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e011      	b.n	80016e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016c0:	4b0b      	ldr	r3, [pc, #44]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016c6:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80016d0:	e007      	b.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016d2:	4b07      	ldr	r3, [pc, #28]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016da:	4a05      	ldr	r2, [pc, #20]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	40007000 	.word	0x40007000
 80016f4:	20000004 	.word	0x20000004
 80016f8:	431bde83 	.word	0x431bde83

080016fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001700:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	4a04      	ldr	r2, [pc, #16]	@ (8001718 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001706:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800170a:	6093      	str	r3, [r2, #8]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40007000 	.word	0x40007000

0800171c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e2fe      	b.n	8001d2c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d075      	beq.n	8001826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800173a:	4b97      	ldr	r3, [pc, #604]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001744:	4b94      	ldr	r3, [pc, #592]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	2b0c      	cmp	r3, #12
 8001752:	d102      	bne.n	800175a <HAL_RCC_OscConfig+0x3e>
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	2b03      	cmp	r3, #3
 8001758:	d002      	beq.n	8001760 <HAL_RCC_OscConfig+0x44>
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2b08      	cmp	r3, #8
 800175e:	d10b      	bne.n	8001778 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001760:	4b8d      	ldr	r3, [pc, #564]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d05b      	beq.n	8001824 <HAL_RCC_OscConfig+0x108>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d157      	bne.n	8001824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e2d9      	b.n	8001d2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001780:	d106      	bne.n	8001790 <HAL_RCC_OscConfig+0x74>
 8001782:	4b85      	ldr	r3, [pc, #532]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a84      	ldr	r2, [pc, #528]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 8001788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e01d      	b.n	80017cc <HAL_RCC_OscConfig+0xb0>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x98>
 800179a:	4b7f      	ldr	r3, [pc, #508]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a7e      	ldr	r2, [pc, #504]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 80017a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a7b      	ldr	r2, [pc, #492]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 80017ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e00b      	b.n	80017cc <HAL_RCC_OscConfig+0xb0>
 80017b4:	4b78      	ldr	r3, [pc, #480]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a77      	ldr	r2, [pc, #476]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 80017ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4b75      	ldr	r3, [pc, #468]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a74      	ldr	r2, [pc, #464]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 80017c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d013      	beq.n	80017fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff fc42 	bl	800105c <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff fc3e 	bl	800105c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	@ 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e29e      	b.n	8001d2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ee:	4b6a      	ldr	r3, [pc, #424]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0xc0>
 80017fa:	e014      	b.n	8001826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fc:	f7ff fc2e 	bl	800105c <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001804:	f7ff fc2a 	bl	800105c <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	@ 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e28a      	b.n	8001d2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001816:	4b60      	ldr	r3, [pc, #384]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0xe8>
 8001822:	e000      	b.n	8001826 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d075      	beq.n	800191e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001832:	4b59      	ldr	r3, [pc, #356]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800183c:	4b56      	ldr	r3, [pc, #344]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	2b0c      	cmp	r3, #12
 800184a:	d102      	bne.n	8001852 <HAL_RCC_OscConfig+0x136>
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d002      	beq.n	8001858 <HAL_RCC_OscConfig+0x13c>
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	2b04      	cmp	r3, #4
 8001856:	d11f      	bne.n	8001898 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001858:	4b4f      	ldr	r3, [pc, #316]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_RCC_OscConfig+0x154>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e25d      	b.n	8001d2c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001870:	4b49      	ldr	r3, [pc, #292]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	061b      	lsls	r3, r3, #24
 800187e:	4946      	ldr	r1, [pc, #280]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001884:	4b45      	ldr	r3, [pc, #276]	@ (800199c <HAL_RCC_OscConfig+0x280>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fb9b 	bl	8000fc4 <HAL_InitTick>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d043      	beq.n	800191c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e249      	b.n	8001d2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d023      	beq.n	80018e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a3c      	ldr	r2, [pc, #240]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 80018a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff fbd6 	bl	800105c <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b4:	f7ff fbd2 	bl	800105c <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e232      	b.n	8001d2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c6:	4b34      	ldr	r3, [pc, #208]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d2:	4b31      	ldr	r3, [pc, #196]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	061b      	lsls	r3, r3, #24
 80018e0:	492d      	ldr	r1, [pc, #180]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]
 80018e6:	e01a      	b.n	800191e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a2a      	ldr	r2, [pc, #168]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 80018ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff fbb2 	bl	800105c <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fc:	f7ff fbae 	bl	800105c <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e20e      	b.n	8001d2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800190e:	4b22      	ldr	r3, [pc, #136]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x1e0>
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800191c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d041      	beq.n	80019ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d01c      	beq.n	800196c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001932:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 8001934:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001938:	4a17      	ldr	r2, [pc, #92]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001942:	f7ff fb8b 	bl	800105c <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194a:	f7ff fb87 	bl	800105c <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e1e7      	b.n	8001d2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800195c:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 800195e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0ef      	beq.n	800194a <HAL_RCC_OscConfig+0x22e>
 800196a:	e020      	b.n	80019ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800196c:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 800196e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001972:	4a09      	ldr	r2, [pc, #36]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197c:	f7ff fb6e 	bl	800105c <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001982:	e00d      	b.n	80019a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001984:	f7ff fb6a 	bl	800105c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d906      	bls.n	80019a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e1ca      	b.n	8001d2c <HAL_RCC_OscConfig+0x610>
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
 800199c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019a0:	4b8c      	ldr	r3, [pc, #560]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 80019a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1ea      	bne.n	8001984 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80a6 	beq.w	8001b08 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019c0:	4b84      	ldr	r3, [pc, #528]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 80019c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_OscConfig+0x2b4>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <HAL_RCC_OscConfig+0x2b6>
 80019d0:	2300      	movs	r3, #0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00d      	beq.n	80019f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	4b7f      	ldr	r3, [pc, #508]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019da:	4a7e      	ldr	r2, [pc, #504]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019e2:	4b7c      	ldr	r3, [pc, #496]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 80019e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019ee:	2301      	movs	r3, #1
 80019f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f2:	4b79      	ldr	r3, [pc, #484]	@ (8001bd8 <HAL_RCC_OscConfig+0x4bc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d118      	bne.n	8001a30 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019fe:	4b76      	ldr	r3, [pc, #472]	@ (8001bd8 <HAL_RCC_OscConfig+0x4bc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a75      	ldr	r2, [pc, #468]	@ (8001bd8 <HAL_RCC_OscConfig+0x4bc>)
 8001a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fb27 	bl	800105c <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a12:	f7ff fb23 	bl	800105c <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e183      	b.n	8001d2c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a24:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd8 <HAL_RCC_OscConfig+0x4bc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d108      	bne.n	8001a4a <HAL_RCC_OscConfig+0x32e>
 8001a38:	4b66      	ldr	r3, [pc, #408]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a3e:	4a65      	ldr	r2, [pc, #404]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a48:	e024      	b.n	8001a94 <HAL_RCC_OscConfig+0x378>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b05      	cmp	r3, #5
 8001a50:	d110      	bne.n	8001a74 <HAL_RCC_OscConfig+0x358>
 8001a52:	4b60      	ldr	r3, [pc, #384]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a58:	4a5e      	ldr	r2, [pc, #376]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a62:	4b5c      	ldr	r3, [pc, #368]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a68:	4a5a      	ldr	r2, [pc, #360]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a72:	e00f      	b.n	8001a94 <HAL_RCC_OscConfig+0x378>
 8001a74:	4b57      	ldr	r3, [pc, #348]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a7a:	4a56      	ldr	r2, [pc, #344]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001a7c:	f023 0301 	bic.w	r3, r3, #1
 8001a80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a84:	4b53      	ldr	r3, [pc, #332]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a8a:	4a52      	ldr	r2, [pc, #328]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001a8c:	f023 0304 	bic.w	r3, r3, #4
 8001a90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d016      	beq.n	8001aca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9c:	f7ff fade 	bl	800105c <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fada 	bl	800105c <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e138      	b.n	8001d2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aba:	4b46      	ldr	r3, [pc, #280]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0ed      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x388>
 8001ac8:	e015      	b.n	8001af6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aca:	f7ff fac7 	bl	800105c <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad0:	e00a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad2:	f7ff fac3 	bl	800105c <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e121      	b.n	8001d2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1ed      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001af6:	7ffb      	ldrb	r3, [r7, #31]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d105      	bne.n	8001b08 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001afc:	4b35      	ldr	r3, [pc, #212]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b00:	4a34      	ldr	r2, [pc, #208]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001b02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b06:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0320 	and.w	r3, r3, #32
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d03c      	beq.n	8001b8e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d01c      	beq.n	8001b56 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001b1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b22:	4a2c      	ldr	r2, [pc, #176]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7ff fa96 	bl	800105c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b34:	f7ff fa92 	bl	800105c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e0f2      	b.n	8001d2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b46:	4b23      	ldr	r3, [pc, #140]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001b48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0ef      	beq.n	8001b34 <HAL_RCC_OscConfig+0x418>
 8001b54:	e01b      	b.n	8001b8e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b56:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001b58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001b5e:	f023 0301 	bic.w	r3, r3, #1
 8001b62:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b66:	f7ff fa79 	bl	800105c <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b6e:	f7ff fa75 	bl	800105c <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e0d5      	b.n	8001d2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b80:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1ef      	bne.n	8001b6e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 80c9 	beq.w	8001d2a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b98:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	2b0c      	cmp	r3, #12
 8001ba2:	f000 8083 	beq.w	8001cac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d15e      	bne.n	8001c6c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bae:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a08      	ldr	r2, [pc, #32]	@ (8001bd4 <HAL_RCC_OscConfig+0x4b8>)
 8001bb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bba:	f7ff fa4f 	bl	800105c <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc0:	e00c      	b.n	8001bdc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc2:	f7ff fa4b 	bl	800105c <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d905      	bls.n	8001bdc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e0ab      	b.n	8001d2c <HAL_RCC_OscConfig+0x610>
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bdc:	4b55      	ldr	r3, [pc, #340]	@ (8001d34 <HAL_RCC_OscConfig+0x618>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1ec      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be8:	4b52      	ldr	r3, [pc, #328]	@ (8001d34 <HAL_RCC_OscConfig+0x618>)
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	4b52      	ldr	r3, [pc, #328]	@ (8001d38 <HAL_RCC_OscConfig+0x61c>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6a11      	ldr	r1, [r2, #32]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bf8:	3a01      	subs	r2, #1
 8001bfa:	0112      	lsls	r2, r2, #4
 8001bfc:	4311      	orrs	r1, r2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001c02:	0212      	lsls	r2, r2, #8
 8001c04:	4311      	orrs	r1, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c0a:	0852      	lsrs	r2, r2, #1
 8001c0c:	3a01      	subs	r2, #1
 8001c0e:	0552      	lsls	r2, r2, #21
 8001c10:	4311      	orrs	r1, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c16:	0852      	lsrs	r2, r2, #1
 8001c18:	3a01      	subs	r2, #1
 8001c1a:	0652      	lsls	r2, r2, #25
 8001c1c:	4311      	orrs	r1, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001c22:	06d2      	lsls	r2, r2, #27
 8001c24:	430a      	orrs	r2, r1
 8001c26:	4943      	ldr	r1, [pc, #268]	@ (8001d34 <HAL_RCC_OscConfig+0x618>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c2c:	4b41      	ldr	r3, [pc, #260]	@ (8001d34 <HAL_RCC_OscConfig+0x618>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a40      	ldr	r2, [pc, #256]	@ (8001d34 <HAL_RCC_OscConfig+0x618>)
 8001c32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c38:	4b3e      	ldr	r3, [pc, #248]	@ (8001d34 <HAL_RCC_OscConfig+0x618>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4a3d      	ldr	r2, [pc, #244]	@ (8001d34 <HAL_RCC_OscConfig+0x618>)
 8001c3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c44:	f7ff fa0a 	bl	800105c <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7ff fa06 	bl	800105c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e066      	b.n	8001d2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5e:	4b35      	ldr	r3, [pc, #212]	@ (8001d34 <HAL_RCC_OscConfig+0x618>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x530>
 8001c6a:	e05e      	b.n	8001d2a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6c:	4b31      	ldr	r3, [pc, #196]	@ (8001d34 <HAL_RCC_OscConfig+0x618>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a30      	ldr	r2, [pc, #192]	@ (8001d34 <HAL_RCC_OscConfig+0x618>)
 8001c72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff f9f0 	bl	800105c <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c80:	f7ff f9ec 	bl	800105c <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e04c      	b.n	8001d2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c92:	4b28      	ldr	r3, [pc, #160]	@ (8001d34 <HAL_RCC_OscConfig+0x618>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c9e:	4b25      	ldr	r3, [pc, #148]	@ (8001d34 <HAL_RCC_OscConfig+0x618>)
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	4924      	ldr	r1, [pc, #144]	@ (8001d34 <HAL_RCC_OscConfig+0x618>)
 8001ca4:	4b25      	ldr	r3, [pc, #148]	@ (8001d3c <HAL_RCC_OscConfig+0x620>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	60cb      	str	r3, [r1, #12]
 8001caa:	e03e      	b.n	8001d2a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e039      	b.n	8001d2c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d34 <HAL_RCC_OscConfig+0x618>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0203 	and.w	r2, r3, #3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d12c      	bne.n	8001d26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d123      	bne.n	8001d26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d11b      	bne.n	8001d26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d113      	bne.n	8001d26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d08:	085b      	lsrs	r3, r3, #1
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d109      	bne.n	8001d26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d1c:	085b      	lsrs	r3, r3, #1
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3720      	adds	r7, #32
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000
 8001d38:	019f800c 	.word	0x019f800c
 8001d3c:	feeefffc 	.word	0xfeeefffc

08001d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e11e      	b.n	8001f96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d58:	4b91      	ldr	r3, [pc, #580]	@ (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 030f 	and.w	r3, r3, #15
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d910      	bls.n	8001d88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b8e      	ldr	r3, [pc, #568]	@ (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 020f 	bic.w	r2, r3, #15
 8001d6e:	498c      	ldr	r1, [pc, #560]	@ (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d76:	4b8a      	ldr	r3, [pc, #552]	@ (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e106      	b.n	8001f96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d073      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d129      	bne.n	8001df0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9c:	4b81      	ldr	r3, [pc, #516]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0f4      	b.n	8001f96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001dac:	f000 f99e 	bl	80020ec <RCC_GetSysClockFreqFromPLLSource>
 8001db0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4a7c      	ldr	r2, [pc, #496]	@ (8001fa8 <HAL_RCC_ClockConfig+0x268>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d93f      	bls.n	8001e3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001dba:	4b7a      	ldr	r3, [pc, #488]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d009      	beq.n	8001dda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d033      	beq.n	8001e3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d12f      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dda:	4b72      	ldr	r3, [pc, #456]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001de2:	4a70      	ldr	r2, [pc, #448]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001de8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001dea:	2380      	movs	r3, #128	@ 0x80
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	e024      	b.n	8001e3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d107      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df8:	4b6a      	ldr	r3, [pc, #424]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0c6      	b.n	8001f96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e08:	4b66      	ldr	r3, [pc, #408]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0be      	b.n	8001f96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e18:	f000 f8ce 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4a61      	ldr	r2, [pc, #388]	@ (8001fa8 <HAL_RCC_ClockConfig+0x268>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d909      	bls.n	8001e3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e26:	4b5f      	ldr	r3, [pc, #380]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e2e:	4a5d      	ldr	r2, [pc, #372]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001e30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e36:	2380      	movs	r3, #128	@ 0x80
 8001e38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e3a:	4b5a      	ldr	r3, [pc, #360]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f023 0203 	bic.w	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	4957      	ldr	r1, [pc, #348]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e4c:	f7ff f906 	bl	800105c <HAL_GetTick>
 8001e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	e00a      	b.n	8001e6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e54:	f7ff f902 	bl	800105c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e095      	b.n	8001f96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	4b4e      	ldr	r3, [pc, #312]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 020c 	and.w	r2, r3, #12
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d1eb      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d023      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e94:	4b43      	ldr	r3, [pc, #268]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	4a42      	ldr	r2, [pc, #264]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001e9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d007      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001eac:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001eb4:	4a3b      	ldr	r2, [pc, #236]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001eb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001eba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ebc:	4b39      	ldr	r3, [pc, #228]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4936      	ldr	r1, [pc, #216]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	608b      	str	r3, [r1, #8]
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2b80      	cmp	r3, #128	@ 0x80
 8001ed4:	d105      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ed6:	4b33      	ldr	r3, [pc, #204]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	4a32      	ldr	r2, [pc, #200]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001edc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ee0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d21d      	bcs.n	8001f2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f023 020f 	bic.w	r2, r3, #15
 8001ef8:	4929      	ldr	r1, [pc, #164]	@ (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f00:	f7ff f8ac 	bl	800105c <HAL_GetTick>
 8001f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	e00a      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f08:	f7ff f8a8 	bl	800105c <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e03b      	b.n	8001f96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b20      	ldr	r3, [pc, #128]	@ (8001fa0 <HAL_RCC_ClockConfig+0x260>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d1ed      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f38:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	4917      	ldr	r1, [pc, #92]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f56:	4b13      	ldr	r3, [pc, #76]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	490f      	ldr	r1, [pc, #60]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f6a:	f000 f825 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <HAL_RCC_ClockConfig+0x264>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	490c      	ldr	r1, [pc, #48]	@ (8001fac <HAL_RCC_ClockConfig+0x26c>)
 8001f7c:	5ccb      	ldrb	r3, [r1, r3]
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	fa22 f303 	lsr.w	r3, r2, r3
 8001f86:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb0 <HAL_RCC_ClockConfig+0x270>)
 8001f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <HAL_RCC_ClockConfig+0x274>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff f818 	bl	8000fc4 <HAL_InitTick>
 8001f94:	4603      	mov	r3, r0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40022000 	.word	0x40022000
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	04c4b400 	.word	0x04c4b400
 8001fac:	0800482c 	.word	0x0800482c
 8001fb0:	20000004 	.word	0x20000004
 8001fb4:	20000008 	.word	0x20000008

08001fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fbe:	4b2c      	ldr	r3, [pc, #176]	@ (8002070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d102      	bne.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fca:	4b2a      	ldr	r3, [pc, #168]	@ (8002074 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	e047      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001fd0:	4b27      	ldr	r3, [pc, #156]	@ (8002070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 030c 	and.w	r3, r3, #12
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d102      	bne.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fdc:	4b26      	ldr	r3, [pc, #152]	@ (8002078 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	e03e      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001fe2:	4b23      	ldr	r3, [pc, #140]	@ (8002070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	d136      	bne.n	800205c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fee:	4b20      	ldr	r3, [pc, #128]	@ (8002070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	3301      	adds	r3, #1
 8002004:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d10c      	bne.n	8002026 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800200c:	4a1a      	ldr	r2, [pc, #104]	@ (8002078 <HAL_RCC_GetSysClockFreq+0xc0>)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	fbb2 f3f3 	udiv	r3, r2, r3
 8002014:	4a16      	ldr	r2, [pc, #88]	@ (8002070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002016:	68d2      	ldr	r2, [r2, #12]
 8002018:	0a12      	lsrs	r2, r2, #8
 800201a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800201e:	fb02 f303 	mul.w	r3, r2, r3
 8002022:	617b      	str	r3, [r7, #20]
      break;
 8002024:	e00c      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002026:	4a13      	ldr	r2, [pc, #76]	@ (8002074 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	fbb2 f3f3 	udiv	r3, r2, r3
 800202e:	4a10      	ldr	r2, [pc, #64]	@ (8002070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002030:	68d2      	ldr	r2, [r2, #12]
 8002032:	0a12      	lsrs	r2, r2, #8
 8002034:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002038:	fb02 f303 	mul.w	r3, r2, r3
 800203c:	617b      	str	r3, [r7, #20]
      break;
 800203e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002040:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	0e5b      	lsrs	r3, r3, #25
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	3301      	adds	r3, #1
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	fbb2 f3f3 	udiv	r3, r2, r3
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	e001      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002060:	693b      	ldr	r3, [r7, #16]
}
 8002062:	4618      	mov	r0, r3
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	00f42400 	.word	0x00f42400
 8002078:	007a1200 	.word	0x007a1200

0800207c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002080:	4b03      	ldr	r3, [pc, #12]	@ (8002090 <HAL_RCC_GetHCLKFreq+0x14>)
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000004 	.word	0x20000004

08002094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002098:	f7ff fff0 	bl	800207c <HAL_RCC_GetHCLKFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	4904      	ldr	r1, [pc, #16]	@ (80020bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80020aa:	5ccb      	ldrb	r3, [r1, r3]
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000
 80020bc:	0800483c 	.word	0x0800483c

080020c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020c4:	f7ff ffda 	bl	800207c <HAL_RCC_GetHCLKFreq>
 80020c8:	4602      	mov	r2, r0
 80020ca:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	0adb      	lsrs	r3, r3, #11
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	4904      	ldr	r1, [pc, #16]	@ (80020e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020d6:	5ccb      	ldrb	r3, [r1, r3]
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000
 80020e8:	0800483c 	.word	0x0800483c

080020ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020f2:	4b1e      	ldr	r3, [pc, #120]	@ (800216c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020fc:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	3301      	adds	r3, #1
 8002108:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b03      	cmp	r3, #3
 800210e:	d10c      	bne.n	800212a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002110:	4a17      	ldr	r2, [pc, #92]	@ (8002170 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	fbb2 f3f3 	udiv	r3, r2, r3
 8002118:	4a14      	ldr	r2, [pc, #80]	@ (800216c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800211a:	68d2      	ldr	r2, [r2, #12]
 800211c:	0a12      	lsrs	r2, r2, #8
 800211e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	617b      	str	r3, [r7, #20]
    break;
 8002128:	e00c      	b.n	8002144 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800212a:	4a12      	ldr	r2, [pc, #72]	@ (8002174 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	4a0e      	ldr	r2, [pc, #56]	@ (800216c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002134:	68d2      	ldr	r2, [r2, #12]
 8002136:	0a12      	lsrs	r2, r2, #8
 8002138:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800213c:	fb02 f303 	mul.w	r3, r2, r3
 8002140:	617b      	str	r3, [r7, #20]
    break;
 8002142:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002144:	4b09      	ldr	r3, [pc, #36]	@ (800216c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0e5b      	lsrs	r3, r3, #25
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	3301      	adds	r3, #1
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	fbb2 f3f3 	udiv	r3, r2, r3
 800215c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800215e:	687b      	ldr	r3, [r7, #4]
}
 8002160:	4618      	mov	r0, r3
 8002162:	371c      	adds	r7, #28
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	40021000 	.word	0x40021000
 8002170:	007a1200 	.word	0x007a1200
 8002174:	00f42400 	.word	0x00f42400

08002178 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002180:	2300      	movs	r3, #0
 8002182:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002184:	2300      	movs	r3, #0
 8002186:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 8098 	beq.w	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219a:	4b43      	ldr	r3, [pc, #268]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10d      	bne.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	4b40      	ldr	r3, [pc, #256]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021aa:	4a3f      	ldr	r2, [pc, #252]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80021b2:	4b3d      	ldr	r3, [pc, #244]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021be:	2301      	movs	r3, #1
 80021c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021c2:	4b3a      	ldr	r3, [pc, #232]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a39      	ldr	r2, [pc, #228]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021ce:	f7fe ff45 	bl	800105c <HAL_GetTick>
 80021d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021d4:	e009      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d6:	f7fe ff41 	bl	800105c <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d902      	bls.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	74fb      	strb	r3, [r7, #19]
        break;
 80021e8:	e005      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021ea:	4b30      	ldr	r3, [pc, #192]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0ef      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80021f6:	7cfb      	ldrb	r3, [r7, #19]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d159      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021fc:	4b2a      	ldr	r3, [pc, #168]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002206:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d01e      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	429a      	cmp	r2, r3
 8002216:	d019      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002218:	4b23      	ldr	r3, [pc, #140]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800221a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800221e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002222:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002224:	4b20      	ldr	r3, [pc, #128]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800222a:	4a1f      	ldr	r2, [pc, #124]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002234:	4b1c      	ldr	r3, [pc, #112]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800223a:	4a1b      	ldr	r2, [pc, #108]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800223c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002240:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002244:	4a18      	ldr	r2, [pc, #96]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d016      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002256:	f7fe ff01 	bl	800105c <HAL_GetTick>
 800225a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800225c:	e00b      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225e:	f7fe fefd 	bl	800105c <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800226c:	4293      	cmp	r3, r2
 800226e:	d902      	bls.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	74fb      	strb	r3, [r7, #19]
            break;
 8002274:	e006      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002276:	4b0c      	ldr	r3, [pc, #48]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0ec      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002284:	7cfb      	ldrb	r3, [r7, #19]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10b      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800228a:	4b07      	ldr	r3, [pc, #28]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800228c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002290:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002298:	4903      	ldr	r1, [pc, #12]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80022a0:	e008      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022a2:	7cfb      	ldrb	r3, [r7, #19]
 80022a4:	74bb      	strb	r3, [r7, #18]
 80022a6:	e005      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022b4:	7c7b      	ldrb	r3, [r7, #17]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d105      	bne.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ba:	4ba6      	ldr	r3, [pc, #664]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022be:	4aa5      	ldr	r2, [pc, #660]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022d2:	4ba0      	ldr	r3, [pc, #640]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d8:	f023 0203 	bic.w	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	499c      	ldr	r1, [pc, #624]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022f4:	4b97      	ldr	r3, [pc, #604]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fa:	f023 020c 	bic.w	r2, r3, #12
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	4994      	ldr	r1, [pc, #592]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002316:	4b8f      	ldr	r3, [pc, #572]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	498b      	ldr	r1, [pc, #556]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002338:	4b86      	ldr	r3, [pc, #536]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800233e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	4983      	ldr	r1, [pc, #524]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800235a:	4b7e      	ldr	r3, [pc, #504]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800235c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002360:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	497a      	ldr	r1, [pc, #488]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800237c:	4b75      	ldr	r3, [pc, #468]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002382:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	4972      	ldr	r1, [pc, #456]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800239e:	4b6d      	ldr	r3, [pc, #436]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	4969      	ldr	r1, [pc, #420]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023c0:	4b64      	ldr	r3, [pc, #400]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4961      	ldr	r1, [pc, #388]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f0:	4958      	ldr	r1, [pc, #352]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002400:	2b00      	cmp	r3, #0
 8002402:	d015      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002404:	4b53      	ldr	r3, [pc, #332]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002412:	4950      	ldr	r1, [pc, #320]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002422:	d105      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002424:	4b4b      	ldr	r3, [pc, #300]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a4a      	ldr	r2, [pc, #296]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800242e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002438:	2b00      	cmp	r3, #0
 800243a:	d015      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800243c:	4b45      	ldr	r3, [pc, #276]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002442:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244a:	4942      	ldr	r1, [pc, #264]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002456:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800245a:	d105      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800245c:	4b3d      	ldr	r3, [pc, #244]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4a3c      	ldr	r2, [pc, #240]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002466:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d015      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002474:	4b37      	ldr	r3, [pc, #220]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	4934      	ldr	r1, [pc, #208]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002492:	d105      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002494:	4b2f      	ldr	r3, [pc, #188]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4a2e      	ldr	r2, [pc, #184]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800249e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d015      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024ac:	4b29      	ldr	r3, [pc, #164]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ba:	4926      	ldr	r1, [pc, #152]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024ca:	d105      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024cc:	4b21      	ldr	r3, [pc, #132]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4a20      	ldr	r2, [pc, #128]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d015      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f2:	4918      	ldr	r1, [pc, #96]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002502:	d105      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002504:	4b13      	ldr	r3, [pc, #76]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a12      	ldr	r2, [pc, #72]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800250a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800250e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d015      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800251c:	4b0d      	ldr	r3, [pc, #52]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002522:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252a:	490a      	ldr	r1, [pc, #40]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002536:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800253a:	d105      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800253c:	4b05      	ldr	r3, [pc, #20]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4a04      	ldr	r2, [pc, #16]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002546:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002548:	7cbb      	ldrb	r3, [r7, #18]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000

08002558 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e09d      	b.n	80026a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	2b00      	cmp	r3, #0
 8002570:	d108      	bne.n	8002584 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800257a:	d009      	beq.n	8002590 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	61da      	str	r2, [r3, #28]
 8002582:	e005      	b.n	8002590 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7fe fbb6 	bl	8000d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025d0:	d902      	bls.n	80025d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	e002      	b.n	80025de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80025d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80025e6:	d007      	beq.n	80025f8 <HAL_SPI_Init+0xa0>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025f0:	d002      	beq.n	80025f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800263a:	ea42 0103 	orr.w	r1, r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002642:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	0c1b      	lsrs	r3, r3, #16
 8002654:	f003 0204 	and.w	r2, r3, #4
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002674:	ea42 0103 	orr.w	r1, r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	69da      	ldr	r2, [r3, #28]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002694:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b088      	sub	sp, #32
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	603b      	str	r3, [r7, #0]
 80026ba:	4613      	mov	r3, r2
 80026bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_SPI_Transmit+0x22>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e15f      	b.n	8002990 <HAL_SPI_Transmit+0x2e2>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026d8:	f7fe fcc0 	bl	800105c <HAL_GetTick>
 80026dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d002      	beq.n	80026f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80026ee:	2302      	movs	r3, #2
 80026f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026f2:	e148      	b.n	8002986 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_SPI_Transmit+0x52>
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d102      	bne.n	8002706 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002704:	e13f      	b.n	8002986 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2203      	movs	r2, #3
 800270a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	88fa      	ldrh	r2, [r7, #6]
 800271e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	88fa      	ldrh	r2, [r7, #6]
 8002724:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002750:	d10f      	bne.n	8002772 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002760:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002770:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800277c:	2b40      	cmp	r3, #64	@ 0x40
 800277e:	d007      	beq.n	8002790 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800278e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002798:	d94f      	bls.n	800283a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_SPI_Transmit+0xfa>
 80027a2:	8afb      	ldrh	r3, [r7, #22]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d142      	bne.n	800282e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ac:	881a      	ldrh	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b8:	1c9a      	adds	r2, r3, #2
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027cc:	e02f      	b.n	800282e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d112      	bne.n	8002802 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e0:	881a      	ldrh	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ec:	1c9a      	adds	r2, r3, #2
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002800:	e015      	b.n	800282e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002802:	f7fe fc2b 	bl	800105c <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d803      	bhi.n	800281a <HAL_SPI_Transmit+0x16c>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002818:	d102      	bne.n	8002820 <HAL_SPI_Transmit+0x172>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d106      	bne.n	800282e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800282c:	e0ab      	b.n	8002986 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1ca      	bne.n	80027ce <HAL_SPI_Transmit+0x120>
 8002838:	e080      	b.n	800293c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_SPI_Transmit+0x19a>
 8002842:	8afb      	ldrh	r3, [r7, #22]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d174      	bne.n	8002932 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d912      	bls.n	8002878 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002856:	881a      	ldrh	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002862:	1c9a      	adds	r2, r3, #2
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b02      	subs	r3, #2
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002876:	e05c      	b.n	8002932 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	330c      	adds	r3, #12
 8002882:	7812      	ldrb	r2, [r2, #0]
 8002884:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800289e:	e048      	b.n	8002932 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d12b      	bne.n	8002906 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d912      	bls.n	80028de <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028bc:	881a      	ldrh	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c8:	1c9a      	adds	r2, r3, #2
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b02      	subs	r3, #2
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80028dc:	e029      	b.n	8002932 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	330c      	adds	r3, #12
 80028e8:	7812      	ldrb	r2, [r2, #0]
 80028ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002904:	e015      	b.n	8002932 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002906:	f7fe fba9 	bl	800105c <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d803      	bhi.n	800291e <HAL_SPI_Transmit+0x270>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291c:	d102      	bne.n	8002924 <HAL_SPI_Transmit+0x276>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d106      	bne.n	8002932 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002930:	e029      	b.n	8002986 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1b1      	bne.n	80028a0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	6839      	ldr	r1, [r7, #0]
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fb69 	bl	8003018 <SPI_EndRxTxTransaction>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10a      	bne.n	8002970 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	77fb      	strb	r3, [r7, #31]
 800297c:	e003      	b.n	8002986 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800298e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3720      	adds	r7, #32
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	@ 0x28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029a6:	2301      	movs	r3, #1
 80029a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_SPI_TransmitReceive+0x26>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e20a      	b.n	8002dd4 <HAL_SPI_TransmitReceive+0x43c>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029c6:	f7fe fb49 	bl	800105c <HAL_GetTick>
 80029ca:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80029d2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80029da:	887b      	ldrh	r3, [r7, #2]
 80029dc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80029de:	887b      	ldrh	r3, [r7, #2]
 80029e0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029e2:	7efb      	ldrb	r3, [r7, #27]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d00e      	beq.n	8002a06 <HAL_SPI_TransmitReceive+0x6e>
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029ee:	d106      	bne.n	80029fe <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d102      	bne.n	80029fe <HAL_SPI_TransmitReceive+0x66>
 80029f8:	7efb      	ldrb	r3, [r7, #27]
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d003      	beq.n	8002a06 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80029fe:	2302      	movs	r3, #2
 8002a00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002a04:	e1e0      	b.n	8002dc8 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_SPI_TransmitReceive+0x80>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <HAL_SPI_TransmitReceive+0x80>
 8002a12:	887b      	ldrh	r3, [r7, #2]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d103      	bne.n	8002a20 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002a1e:	e1d3      	b.n	8002dc8 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d003      	beq.n	8002a34 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2205      	movs	r2, #5
 8002a30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	887a      	ldrh	r2, [r7, #2]
 8002a44:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	887a      	ldrh	r2, [r7, #2]
 8002a4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	887a      	ldrh	r2, [r7, #2]
 8002a5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a76:	d802      	bhi.n	8002a7e <HAL_SPI_TransmitReceive+0xe6>
 8002a78:	8a3b      	ldrh	r3, [r7, #16]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d908      	bls.n	8002a90 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	e007      	b.n	8002aa0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a9e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aaa:	2b40      	cmp	r3, #64	@ 0x40
 8002aac:	d007      	beq.n	8002abe <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002abc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ac6:	f240 8081 	bls.w	8002bcc <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <HAL_SPI_TransmitReceive+0x140>
 8002ad2:	8a7b      	ldrh	r3, [r7, #18]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d16d      	bne.n	8002bb4 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002adc:	881a      	ldrh	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae8:	1c9a      	adds	r2, r3, #2
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002afc:	e05a      	b.n	8002bb4 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d11b      	bne.n	8002b44 <HAL_SPI_TransmitReceive+0x1ac>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d016      	beq.n	8002b44 <HAL_SPI_TransmitReceive+0x1ac>
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d113      	bne.n	8002b44 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b20:	881a      	ldrh	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b2c:	1c9a      	adds	r2, r3, #2
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d11c      	bne.n	8002b8c <HAL_SPI_TransmitReceive+0x1f4>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d016      	beq.n	8002b8c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b68:	b292      	uxth	r2, r2
 8002b6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	1c9a      	adds	r2, r3, #2
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b8c:	f7fe fa66 	bl	800105c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d80b      	bhi.n	8002bb4 <HAL_SPI_TransmitReceive+0x21c>
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba2:	d007      	beq.n	8002bb4 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002bb2:	e109      	b.n	8002dc8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d19f      	bne.n	8002afe <HAL_SPI_TransmitReceive+0x166>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d199      	bne.n	8002afe <HAL_SPI_TransmitReceive+0x166>
 8002bca:	e0e3      	b.n	8002d94 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_SPI_TransmitReceive+0x244>
 8002bd4:	8a7b      	ldrh	r3, [r7, #18]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	f040 80cf 	bne.w	8002d7a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d912      	bls.n	8002c0c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bea:	881a      	ldrh	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf6:	1c9a      	adds	r2, r3, #2
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b02      	subs	r3, #2
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c0a:	e0b6      	b.n	8002d7a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	330c      	adds	r3, #12
 8002c16:	7812      	ldrb	r2, [r2, #0]
 8002c18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c32:	e0a2      	b.n	8002d7a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d134      	bne.n	8002cac <HAL_SPI_TransmitReceive+0x314>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d02f      	beq.n	8002cac <HAL_SPI_TransmitReceive+0x314>
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d12c      	bne.n	8002cac <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d912      	bls.n	8002c82 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c60:	881a      	ldrh	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6c:	1c9a      	adds	r2, r3, #2
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b02      	subs	r3, #2
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c80:	e012      	b.n	8002ca8 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	330c      	adds	r3, #12
 8002c8c:	7812      	ldrb	r2, [r2, #0]
 8002c8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d148      	bne.n	8002d4c <HAL_SPI_TransmitReceive+0x3b4>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d042      	beq.n	8002d4c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d923      	bls.n	8002d1a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cdc:	b292      	uxth	r2, r2
 8002cde:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce4:	1c9a      	adds	r2, r3, #2
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b02      	subs	r3, #2
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d81f      	bhi.n	8002d48 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d16:	605a      	str	r2, [r3, #4]
 8002d18:	e016      	b.n	8002d48 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f103 020c 	add.w	r2, r3, #12
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d26:	7812      	ldrb	r2, [r2, #0]
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d4c:	f7fe f986 	bl	800105c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d803      	bhi.n	8002d64 <HAL_SPI_TransmitReceive+0x3cc>
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d62:	d102      	bne.n	8002d6a <HAL_SPI_TransmitReceive+0x3d2>
 8002d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d107      	bne.n	8002d7a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002d78:	e026      	b.n	8002dc8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f47f af57 	bne.w	8002c34 <HAL_SPI_TransmitReceive+0x29c>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f47f af50 	bne.w	8002c34 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d94:	69fa      	ldr	r2, [r7, #28]
 8002d96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f93d 	bl	8003018 <SPI_EndRxTxTransaction>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dbe:	e003      	b.n	8002dc8 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3728      	adds	r7, #40	@ 0x28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002dec:	f7fe f936 	bl	800105c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	4413      	add	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002dfc:	f7fe f92e 	bl	800105c <HAL_GetTick>
 8002e00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e02:	4b39      	ldr	r3, [pc, #228]	@ (8002ee8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	015b      	lsls	r3, r3, #5
 8002e08:	0d1b      	lsrs	r3, r3, #20
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	fb02 f303 	mul.w	r3, r2, r3
 8002e10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e12:	e054      	b.n	8002ebe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1a:	d050      	beq.n	8002ebe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e1c:	f7fe f91e 	bl	800105c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d902      	bls.n	8002e32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d13d      	bne.n	8002eae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e4a:	d111      	bne.n	8002e70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e54:	d004      	beq.n	8002e60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e5e:	d107      	bne.n	8002e70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e78:	d10f      	bne.n	8002e9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e017      	b.n	8002ede <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	bf0c      	ite	eq
 8002ece:	2301      	moveq	r3, #1
 8002ed0:	2300      	movne	r3, #0
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d19b      	bne.n	8002e14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3720      	adds	r7, #32
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000004 	.word	0x20000004

08002eec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08a      	sub	sp, #40	@ 0x28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002efe:	f7fe f8ad 	bl	800105c <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002f0e:	f7fe f8a5 	bl	800105c <HAL_GetTick>
 8002f12:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	330c      	adds	r3, #12
 8002f1a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f1c:	4b3d      	ldr	r3, [pc, #244]	@ (8003014 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	00da      	lsls	r2, r3, #3
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	0d1b      	lsrs	r3, r3, #20
 8002f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f34:	e060      	b.n	8002ff8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002f3c:	d107      	bne.n	8002f4e <SPI_WaitFifoStateUntilTimeout+0x62>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d104      	bne.n	8002f4e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d050      	beq.n	8002ff8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f56:	f7fe f881 	bl	800105c <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d902      	bls.n	8002f6c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d13d      	bne.n	8002fe8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002f7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f84:	d111      	bne.n	8002faa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f8e:	d004      	beq.n	8002f9a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f98:	d107      	bne.n	8002faa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fa8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fb2:	d10f      	bne.n	8002fd4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fd2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e010      	b.n	800300a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	4013      	ands	r3, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	429a      	cmp	r2, r3
 8003006:	d196      	bne.n	8002f36 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3728      	adds	r7, #40	@ 0x28
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000004 	.word	0x20000004

08003018 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af02      	add	r7, sp, #8
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2200      	movs	r2, #0
 800302c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f7ff ff5b 	bl	8002eec <SPI_WaitFifoStateUntilTimeout>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d007      	beq.n	800304c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003040:	f043 0220 	orr.w	r2, r3, #32
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e027      	b.n	800309c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2200      	movs	r2, #0
 8003054:	2180      	movs	r1, #128	@ 0x80
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f7ff fec0 	bl	8002ddc <SPI_WaitFlagStateUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d007      	beq.n	8003072 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003066:	f043 0220 	orr.w	r2, r3, #32
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e014      	b.n	800309c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2200      	movs	r2, #0
 800307a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f7ff ff34 	bl	8002eec <SPI_WaitFifoStateUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308e:	f043 0220 	orr.w	r2, r3, #32
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e000      	b.n	800309c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e042      	b.n	800313c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d106      	bne.n	80030ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7fd fe69 	bl	8000da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2224      	movs	r2, #36	@ 0x24
 80030d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0201 	bic.w	r2, r2, #1
 80030e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fb82 	bl	80037f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f8b3 	bl	8003260 <UART_SetConfig>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e01b      	b.n	800313c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003112:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003122:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fc01 	bl	800393c <UART_CheckIdleState>
 800313a:	4603      	mov	r3, r0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08a      	sub	sp, #40	@ 0x28
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	4613      	mov	r3, r2
 8003152:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315a:	2b20      	cmp	r3, #32
 800315c:	d17b      	bne.n	8003256 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <HAL_UART_Transmit+0x26>
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e074      	b.n	8003258 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2221      	movs	r2, #33	@ 0x21
 800317a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800317e:	f7fd ff6d 	bl	800105c <HAL_GetTick>
 8003182:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	88fa      	ldrh	r2, [r7, #6]
 8003188:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	88fa      	ldrh	r2, [r7, #6]
 8003190:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800319c:	d108      	bne.n	80031b0 <HAL_UART_Transmit+0x6c>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d104      	bne.n	80031b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	e003      	b.n	80031b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031b8:	e030      	b.n	800321c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2200      	movs	r2, #0
 80031c2:	2180      	movs	r1, #128	@ 0x80
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 fc63 	bl	8003a90 <UART_WaitOnFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e03d      	b.n	8003258 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10b      	bne.n	80031fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	3302      	adds	r3, #2
 80031f6:	61bb      	str	r3, [r7, #24]
 80031f8:	e007      	b.n	800320a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	781a      	ldrb	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	3301      	adds	r3, #1
 8003208:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1c8      	bne.n	80031ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2200      	movs	r2, #0
 8003230:	2140      	movs	r1, #64	@ 0x40
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 fc2c 	bl	8003a90 <UART_WaitOnFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e006      	b.n	8003258 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	e000      	b.n	8003258 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003256:	2302      	movs	r3, #2
  }
}
 8003258:	4618      	mov	r0, r3
 800325a:	3720      	adds	r7, #32
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003264:	b08c      	sub	sp, #48	@ 0x30
 8003266:	af00      	add	r7, sp, #0
 8003268:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	431a      	orrs	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	431a      	orrs	r2, r3
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	4313      	orrs	r3, r2
 8003286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4bab      	ldr	r3, [pc, #684]	@ (800353c <UART_SetConfig+0x2dc>)
 8003290:	4013      	ands	r3, r2
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003298:	430b      	orrs	r3, r1
 800329a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4aa0      	ldr	r2, [pc, #640]	@ (8003540 <UART_SetConfig+0x2e0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d004      	beq.n	80032cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032c8:	4313      	orrs	r3, r2
 80032ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80032d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ea:	f023 010f 	bic.w	r1, r3, #15
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a91      	ldr	r2, [pc, #580]	@ (8003544 <UART_SetConfig+0x2e4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d125      	bne.n	8003350 <UART_SetConfig+0xf0>
 8003304:	4b90      	ldr	r3, [pc, #576]	@ (8003548 <UART_SetConfig+0x2e8>)
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	2b03      	cmp	r3, #3
 8003310:	d81a      	bhi.n	8003348 <UART_SetConfig+0xe8>
 8003312:	a201      	add	r2, pc, #4	@ (adr r2, 8003318 <UART_SetConfig+0xb8>)
 8003314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003318:	08003329 	.word	0x08003329
 800331c:	08003339 	.word	0x08003339
 8003320:	08003331 	.word	0x08003331
 8003324:	08003341 	.word	0x08003341
 8003328:	2301      	movs	r3, #1
 800332a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800332e:	e0d6      	b.n	80034de <UART_SetConfig+0x27e>
 8003330:	2302      	movs	r3, #2
 8003332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003336:	e0d2      	b.n	80034de <UART_SetConfig+0x27e>
 8003338:	2304      	movs	r3, #4
 800333a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800333e:	e0ce      	b.n	80034de <UART_SetConfig+0x27e>
 8003340:	2308      	movs	r3, #8
 8003342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003346:	e0ca      	b.n	80034de <UART_SetConfig+0x27e>
 8003348:	2310      	movs	r3, #16
 800334a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800334e:	e0c6      	b.n	80034de <UART_SetConfig+0x27e>
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a7d      	ldr	r2, [pc, #500]	@ (800354c <UART_SetConfig+0x2ec>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d138      	bne.n	80033cc <UART_SetConfig+0x16c>
 800335a:	4b7b      	ldr	r3, [pc, #492]	@ (8003548 <UART_SetConfig+0x2e8>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003360:	f003 030c 	and.w	r3, r3, #12
 8003364:	2b0c      	cmp	r3, #12
 8003366:	d82d      	bhi.n	80033c4 <UART_SetConfig+0x164>
 8003368:	a201      	add	r2, pc, #4	@ (adr r2, 8003370 <UART_SetConfig+0x110>)
 800336a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336e:	bf00      	nop
 8003370:	080033a5 	.word	0x080033a5
 8003374:	080033c5 	.word	0x080033c5
 8003378:	080033c5 	.word	0x080033c5
 800337c:	080033c5 	.word	0x080033c5
 8003380:	080033b5 	.word	0x080033b5
 8003384:	080033c5 	.word	0x080033c5
 8003388:	080033c5 	.word	0x080033c5
 800338c:	080033c5 	.word	0x080033c5
 8003390:	080033ad 	.word	0x080033ad
 8003394:	080033c5 	.word	0x080033c5
 8003398:	080033c5 	.word	0x080033c5
 800339c:	080033c5 	.word	0x080033c5
 80033a0:	080033bd 	.word	0x080033bd
 80033a4:	2300      	movs	r3, #0
 80033a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033aa:	e098      	b.n	80034de <UART_SetConfig+0x27e>
 80033ac:	2302      	movs	r3, #2
 80033ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033b2:	e094      	b.n	80034de <UART_SetConfig+0x27e>
 80033b4:	2304      	movs	r3, #4
 80033b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033ba:	e090      	b.n	80034de <UART_SetConfig+0x27e>
 80033bc:	2308      	movs	r3, #8
 80033be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033c2:	e08c      	b.n	80034de <UART_SetConfig+0x27e>
 80033c4:	2310      	movs	r3, #16
 80033c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033ca:	e088      	b.n	80034de <UART_SetConfig+0x27e>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a5f      	ldr	r2, [pc, #380]	@ (8003550 <UART_SetConfig+0x2f0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d125      	bne.n	8003422 <UART_SetConfig+0x1c2>
 80033d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003548 <UART_SetConfig+0x2e8>)
 80033d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80033e0:	2b30      	cmp	r3, #48	@ 0x30
 80033e2:	d016      	beq.n	8003412 <UART_SetConfig+0x1b2>
 80033e4:	2b30      	cmp	r3, #48	@ 0x30
 80033e6:	d818      	bhi.n	800341a <UART_SetConfig+0x1ba>
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d00a      	beq.n	8003402 <UART_SetConfig+0x1a2>
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	d814      	bhi.n	800341a <UART_SetConfig+0x1ba>
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <UART_SetConfig+0x19a>
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d008      	beq.n	800340a <UART_SetConfig+0x1aa>
 80033f8:	e00f      	b.n	800341a <UART_SetConfig+0x1ba>
 80033fa:	2300      	movs	r3, #0
 80033fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003400:	e06d      	b.n	80034de <UART_SetConfig+0x27e>
 8003402:	2302      	movs	r3, #2
 8003404:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003408:	e069      	b.n	80034de <UART_SetConfig+0x27e>
 800340a:	2304      	movs	r3, #4
 800340c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003410:	e065      	b.n	80034de <UART_SetConfig+0x27e>
 8003412:	2308      	movs	r3, #8
 8003414:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003418:	e061      	b.n	80034de <UART_SetConfig+0x27e>
 800341a:	2310      	movs	r3, #16
 800341c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003420:	e05d      	b.n	80034de <UART_SetConfig+0x27e>
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a4b      	ldr	r2, [pc, #300]	@ (8003554 <UART_SetConfig+0x2f4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d125      	bne.n	8003478 <UART_SetConfig+0x218>
 800342c:	4b46      	ldr	r3, [pc, #280]	@ (8003548 <UART_SetConfig+0x2e8>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003432:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003436:	2bc0      	cmp	r3, #192	@ 0xc0
 8003438:	d016      	beq.n	8003468 <UART_SetConfig+0x208>
 800343a:	2bc0      	cmp	r3, #192	@ 0xc0
 800343c:	d818      	bhi.n	8003470 <UART_SetConfig+0x210>
 800343e:	2b80      	cmp	r3, #128	@ 0x80
 8003440:	d00a      	beq.n	8003458 <UART_SetConfig+0x1f8>
 8003442:	2b80      	cmp	r3, #128	@ 0x80
 8003444:	d814      	bhi.n	8003470 <UART_SetConfig+0x210>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <UART_SetConfig+0x1f0>
 800344a:	2b40      	cmp	r3, #64	@ 0x40
 800344c:	d008      	beq.n	8003460 <UART_SetConfig+0x200>
 800344e:	e00f      	b.n	8003470 <UART_SetConfig+0x210>
 8003450:	2300      	movs	r3, #0
 8003452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003456:	e042      	b.n	80034de <UART_SetConfig+0x27e>
 8003458:	2302      	movs	r3, #2
 800345a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800345e:	e03e      	b.n	80034de <UART_SetConfig+0x27e>
 8003460:	2304      	movs	r3, #4
 8003462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003466:	e03a      	b.n	80034de <UART_SetConfig+0x27e>
 8003468:	2308      	movs	r3, #8
 800346a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800346e:	e036      	b.n	80034de <UART_SetConfig+0x27e>
 8003470:	2310      	movs	r3, #16
 8003472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003476:	e032      	b.n	80034de <UART_SetConfig+0x27e>
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a30      	ldr	r2, [pc, #192]	@ (8003540 <UART_SetConfig+0x2e0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d12a      	bne.n	80034d8 <UART_SetConfig+0x278>
 8003482:	4b31      	ldr	r3, [pc, #196]	@ (8003548 <UART_SetConfig+0x2e8>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003488:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800348c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003490:	d01a      	beq.n	80034c8 <UART_SetConfig+0x268>
 8003492:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003496:	d81b      	bhi.n	80034d0 <UART_SetConfig+0x270>
 8003498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800349c:	d00c      	beq.n	80034b8 <UART_SetConfig+0x258>
 800349e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034a2:	d815      	bhi.n	80034d0 <UART_SetConfig+0x270>
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <UART_SetConfig+0x250>
 80034a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ac:	d008      	beq.n	80034c0 <UART_SetConfig+0x260>
 80034ae:	e00f      	b.n	80034d0 <UART_SetConfig+0x270>
 80034b0:	2300      	movs	r3, #0
 80034b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034b6:	e012      	b.n	80034de <UART_SetConfig+0x27e>
 80034b8:	2302      	movs	r3, #2
 80034ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034be:	e00e      	b.n	80034de <UART_SetConfig+0x27e>
 80034c0:	2304      	movs	r3, #4
 80034c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034c6:	e00a      	b.n	80034de <UART_SetConfig+0x27e>
 80034c8:	2308      	movs	r3, #8
 80034ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034ce:	e006      	b.n	80034de <UART_SetConfig+0x27e>
 80034d0:	2310      	movs	r3, #16
 80034d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034d6:	e002      	b.n	80034de <UART_SetConfig+0x27e>
 80034d8:	2310      	movs	r3, #16
 80034da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a17      	ldr	r2, [pc, #92]	@ (8003540 <UART_SetConfig+0x2e0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	f040 80a8 	bne.w	800363a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d834      	bhi.n	800355c <UART_SetConfig+0x2fc>
 80034f2:	a201      	add	r2, pc, #4	@ (adr r2, 80034f8 <UART_SetConfig+0x298>)
 80034f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f8:	0800351d 	.word	0x0800351d
 80034fc:	0800355d 	.word	0x0800355d
 8003500:	08003525 	.word	0x08003525
 8003504:	0800355d 	.word	0x0800355d
 8003508:	0800352b 	.word	0x0800352b
 800350c:	0800355d 	.word	0x0800355d
 8003510:	0800355d 	.word	0x0800355d
 8003514:	0800355d 	.word	0x0800355d
 8003518:	08003533 	.word	0x08003533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800351c:	f7fe fdba 	bl	8002094 <HAL_RCC_GetPCLK1Freq>
 8003520:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003522:	e021      	b.n	8003568 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003524:	4b0c      	ldr	r3, [pc, #48]	@ (8003558 <UART_SetConfig+0x2f8>)
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003528:	e01e      	b.n	8003568 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800352a:	f7fe fd45 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 800352e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003530:	e01a      	b.n	8003568 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003536:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003538:	e016      	b.n	8003568 <UART_SetConfig+0x308>
 800353a:	bf00      	nop
 800353c:	cfff69f3 	.word	0xcfff69f3
 8003540:	40008000 	.word	0x40008000
 8003544:	40013800 	.word	0x40013800
 8003548:	40021000 	.word	0x40021000
 800354c:	40004400 	.word	0x40004400
 8003550:	40004800 	.word	0x40004800
 8003554:	40004c00 	.word	0x40004c00
 8003558:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003566:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 812a 	beq.w	80037c4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	4a9e      	ldr	r2, [pc, #632]	@ (80037f0 <UART_SetConfig+0x590>)
 8003576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800357a:	461a      	mov	r2, r3
 800357c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003582:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	4413      	add	r3, r2
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	429a      	cmp	r2, r3
 8003592:	d305      	bcc.n	80035a0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	429a      	cmp	r2, r3
 800359e:	d903      	bls.n	80035a8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80035a6:	e10d      	b.n	80037c4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035aa:	2200      	movs	r2, #0
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	60fa      	str	r2, [r7, #12]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	4a8e      	ldr	r2, [pc, #568]	@ (80037f0 <UART_SetConfig+0x590>)
 80035b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2200      	movs	r2, #0
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	607a      	str	r2, [r7, #4]
 80035c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035ca:	f7fc fe79 	bl	80002c0 <__aeabi_uldivmod>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4610      	mov	r0, r2
 80035d4:	4619      	mov	r1, r3
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	020b      	lsls	r3, r1, #8
 80035e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80035e4:	0202      	lsls	r2, r0, #8
 80035e6:	6979      	ldr	r1, [r7, #20]
 80035e8:	6849      	ldr	r1, [r1, #4]
 80035ea:	0849      	lsrs	r1, r1, #1
 80035ec:	2000      	movs	r0, #0
 80035ee:	460c      	mov	r4, r1
 80035f0:	4605      	mov	r5, r0
 80035f2:	eb12 0804 	adds.w	r8, r2, r4
 80035f6:	eb43 0905 	adc.w	r9, r3, r5
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	469a      	mov	sl, r3
 8003602:	4693      	mov	fp, r2
 8003604:	4652      	mov	r2, sl
 8003606:	465b      	mov	r3, fp
 8003608:	4640      	mov	r0, r8
 800360a:	4649      	mov	r1, r9
 800360c:	f7fc fe58 	bl	80002c0 <__aeabi_uldivmod>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4613      	mov	r3, r2
 8003616:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800361e:	d308      	bcc.n	8003632 <UART_SetConfig+0x3d2>
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003626:	d204      	bcs.n	8003632 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6a3a      	ldr	r2, [r7, #32]
 800362e:	60da      	str	r2, [r3, #12]
 8003630:	e0c8      	b.n	80037c4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003638:	e0c4      	b.n	80037c4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003642:	d167      	bne.n	8003714 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003644:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003648:	2b08      	cmp	r3, #8
 800364a:	d828      	bhi.n	800369e <UART_SetConfig+0x43e>
 800364c:	a201      	add	r2, pc, #4	@ (adr r2, 8003654 <UART_SetConfig+0x3f4>)
 800364e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003652:	bf00      	nop
 8003654:	08003679 	.word	0x08003679
 8003658:	08003681 	.word	0x08003681
 800365c:	08003689 	.word	0x08003689
 8003660:	0800369f 	.word	0x0800369f
 8003664:	0800368f 	.word	0x0800368f
 8003668:	0800369f 	.word	0x0800369f
 800366c:	0800369f 	.word	0x0800369f
 8003670:	0800369f 	.word	0x0800369f
 8003674:	08003697 	.word	0x08003697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003678:	f7fe fd0c 	bl	8002094 <HAL_RCC_GetPCLK1Freq>
 800367c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800367e:	e014      	b.n	80036aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003680:	f7fe fd1e 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
 8003684:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003686:	e010      	b.n	80036aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003688:	4b5a      	ldr	r3, [pc, #360]	@ (80037f4 <UART_SetConfig+0x594>)
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800368c:	e00d      	b.n	80036aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800368e:	f7fe fc93 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8003692:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003694:	e009      	b.n	80036aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800369a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800369c:	e005      	b.n	80036aa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80036a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 8089 	beq.w	80037c4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b6:	4a4e      	ldr	r2, [pc, #312]	@ (80037f0 <UART_SetConfig+0x590>)
 80036b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036bc:	461a      	mov	r2, r3
 80036be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80036c4:	005a      	lsls	r2, r3, #1
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	085b      	lsrs	r3, r3, #1
 80036cc:	441a      	add	r2, r3
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	2b0f      	cmp	r3, #15
 80036dc:	d916      	bls.n	800370c <UART_SetConfig+0x4ac>
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036e4:	d212      	bcs.n	800370c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f023 030f 	bic.w	r3, r3, #15
 80036ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	085b      	lsrs	r3, r3, #1
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	8bfb      	ldrh	r3, [r7, #30]
 80036fe:	4313      	orrs	r3, r2
 8003700:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	8bfa      	ldrh	r2, [r7, #30]
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	e05b      	b.n	80037c4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003712:	e057      	b.n	80037c4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003714:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003718:	2b08      	cmp	r3, #8
 800371a:	d828      	bhi.n	800376e <UART_SetConfig+0x50e>
 800371c:	a201      	add	r2, pc, #4	@ (adr r2, 8003724 <UART_SetConfig+0x4c4>)
 800371e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003722:	bf00      	nop
 8003724:	08003749 	.word	0x08003749
 8003728:	08003751 	.word	0x08003751
 800372c:	08003759 	.word	0x08003759
 8003730:	0800376f 	.word	0x0800376f
 8003734:	0800375f 	.word	0x0800375f
 8003738:	0800376f 	.word	0x0800376f
 800373c:	0800376f 	.word	0x0800376f
 8003740:	0800376f 	.word	0x0800376f
 8003744:	08003767 	.word	0x08003767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003748:	f7fe fca4 	bl	8002094 <HAL_RCC_GetPCLK1Freq>
 800374c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800374e:	e014      	b.n	800377a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003750:	f7fe fcb6 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
 8003754:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003756:	e010      	b.n	800377a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003758:	4b26      	ldr	r3, [pc, #152]	@ (80037f4 <UART_SetConfig+0x594>)
 800375a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800375c:	e00d      	b.n	800377a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800375e:	f7fe fc2b 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8003762:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003764:	e009      	b.n	800377a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800376a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800376c:	e005      	b.n	800377a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003778:	bf00      	nop
    }

    if (pclk != 0U)
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	2b00      	cmp	r3, #0
 800377e:	d021      	beq.n	80037c4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	4a1a      	ldr	r2, [pc, #104]	@ (80037f0 <UART_SetConfig+0x590>)
 8003786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800378a:	461a      	mov	r2, r3
 800378c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	085b      	lsrs	r3, r3, #1
 8003798:	441a      	add	r2, r3
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	2b0f      	cmp	r3, #15
 80037a8:	d909      	bls.n	80037be <UART_SetConfig+0x55e>
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b0:	d205      	bcs.n	80037be <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60da      	str	r2, [r3, #12]
 80037bc:	e002      	b.n	80037c4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2200      	movs	r2, #0
 80037d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2200      	movs	r2, #0
 80037de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80037e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3730      	adds	r7, #48	@ 0x30
 80037e8:	46bd      	mov	sp, r7
 80037ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ee:	bf00      	nop
 80037f0:	08004844 	.word	0x08004844
 80037f4:	00f42400 	.word	0x00f42400

080037f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003804:	f003 0308 	and.w	r3, r3, #8
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00a      	beq.n	8003822 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00a      	beq.n	8003866 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01a      	beq.n	800390e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038f6:	d10a      	bne.n	800390e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	605a      	str	r2, [r3, #4]
  }
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b098      	sub	sp, #96	@ 0x60
 8003940:	af02      	add	r7, sp, #8
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800394c:	f7fd fb86 	bl	800105c <HAL_GetTick>
 8003950:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b08      	cmp	r3, #8
 800395e:	d12f      	bne.n	80039c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003960:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003968:	2200      	movs	r2, #0
 800396a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f88e 	bl	8003a90 <UART_WaitOnFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d022      	beq.n	80039c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003982:	e853 3f00 	ldrex	r3, [r3]
 8003986:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800398a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800398e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003998:	647b      	str	r3, [r7, #68]	@ 0x44
 800399a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800399e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039a0:	e841 2300 	strex	r3, r2, [r1]
 80039a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1e6      	bne.n	800397a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e063      	b.n	8003a88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d149      	bne.n	8003a62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d6:	2200      	movs	r2, #0
 80039d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f857 	bl	8003a90 <UART_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d03c      	beq.n	8003a62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	e853 3f00 	ldrex	r3, [r3]
 80039f4:	623b      	str	r3, [r7, #32]
   return(result);
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a06:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1e6      	bne.n	80039e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3308      	adds	r3, #8
 8003a20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	e853 3f00 	ldrex	r3, [r3]
 8003a28:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f023 0301 	bic.w	r3, r3, #1
 8003a30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3308      	adds	r3, #8
 8003a38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a3a:	61fa      	str	r2, [r7, #28]
 8003a3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3e:	69b9      	ldr	r1, [r7, #24]
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	e841 2300 	strex	r3, r2, [r1]
 8003a46:	617b      	str	r3, [r7, #20]
   return(result);
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e5      	bne.n	8003a1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e012      	b.n	8003a88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3758      	adds	r7, #88	@ 0x58
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa0:	e04f      	b.n	8003b42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa8:	d04b      	beq.n	8003b42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aaa:	f7fd fad7 	bl	800105c <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d302      	bcc.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e04e      	b.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d037      	beq.n	8003b42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b80      	cmp	r3, #128	@ 0x80
 8003ad6:	d034      	beq.n	8003b42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b40      	cmp	r3, #64	@ 0x40
 8003adc:	d031      	beq.n	8003b42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d110      	bne.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2208      	movs	r2, #8
 8003af2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f838 	bl	8003b6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2208      	movs	r2, #8
 8003afe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e029      	b.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b1c:	d111      	bne.n	8003b42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f81e 	bl	8003b6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e00f      	b.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	bf0c      	ite	eq
 8003b52:	2301      	moveq	r3, #1
 8003b54:	2300      	movne	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	461a      	mov	r2, r3
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d0a0      	beq.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b095      	sub	sp, #84	@ 0x54
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b7a:	e853 3f00 	ldrex	r3, [r3]
 8003b7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b90:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b98:	e841 2300 	strex	r3, r2, [r1]
 8003b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1e6      	bne.n	8003b72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3308      	adds	r3, #8
 8003baa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	e853 3f00 	ldrex	r3, [r3]
 8003bb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bba:	f023 0301 	bic.w	r3, r3, #1
 8003bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3308      	adds	r3, #8
 8003bc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e3      	bne.n	8003ba4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d118      	bne.n	8003c16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f023 0310 	bic.w	r3, r3, #16
 8003bf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c02:	61bb      	str	r3, [r7, #24]
 8003c04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	6979      	ldr	r1, [r7, #20]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e6      	bne.n	8003be4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003c2a:	bf00      	nop
 8003c2c:	3754      	adds	r7, #84	@ 0x54
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b085      	sub	sp, #20
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_UARTEx_DisableFifoMode+0x16>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e027      	b.n	8003c9c <HAL_UARTEx_DisableFifoMode+0x66>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2224      	movs	r2, #36	@ 0x24
 8003c58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003c7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e02d      	b.n	8003d1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2224      	movs	r2, #36	@ 0x24
 8003ccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0201 	bic.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f84f 	bl	8003da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e02d      	b.n	8003d98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2224      	movs	r2, #36	@ 0x24
 8003d48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0201 	bic.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f811 	bl	8003da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d108      	bne.n	8003dc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003dc0:	e031      	b.n	8003e26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003dc6:	2308      	movs	r3, #8
 8003dc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	0e5b      	lsrs	r3, r3, #25
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	0f5b      	lsrs	r3, r3, #29
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003dea:	7bbb      	ldrb	r3, [r7, #14]
 8003dec:	7b3a      	ldrb	r2, [r7, #12]
 8003dee:	4911      	ldr	r1, [pc, #68]	@ (8003e34 <UARTEx_SetNbDataToProcess+0x94>)
 8003df0:	5c8a      	ldrb	r2, [r1, r2]
 8003df2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003df6:	7b3a      	ldrb	r2, [r7, #12]
 8003df8:	490f      	ldr	r1, [pc, #60]	@ (8003e38 <UARTEx_SetNbDataToProcess+0x98>)
 8003dfa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003dfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	7b7a      	ldrb	r2, [r7, #13]
 8003e0c:	4909      	ldr	r1, [pc, #36]	@ (8003e34 <UARTEx_SetNbDataToProcess+0x94>)
 8003e0e:	5c8a      	ldrb	r2, [r1, r2]
 8003e10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e14:	7b7a      	ldrb	r2, [r7, #13]
 8003e16:	4908      	ldr	r1, [pc, #32]	@ (8003e38 <UARTEx_SetNbDataToProcess+0x98>)
 8003e18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	0800485c 	.word	0x0800485c
 8003e38:	08004864 	.word	0x08004864

08003e3c <malloc>:
 8003e3c:	4b02      	ldr	r3, [pc, #8]	@ (8003e48 <malloc+0xc>)
 8003e3e:	4601      	mov	r1, r0
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	f000 b82d 	b.w	8003ea0 <_malloc_r>
 8003e46:	bf00      	nop
 8003e48:	20000010 	.word	0x20000010

08003e4c <free>:
 8003e4c:	4b02      	ldr	r3, [pc, #8]	@ (8003e58 <free+0xc>)
 8003e4e:	4601      	mov	r1, r0
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	f000 b929 	b.w	80040a8 <_free_r>
 8003e56:	bf00      	nop
 8003e58:	20000010 	.word	0x20000010

08003e5c <sbrk_aligned>:
 8003e5c:	b570      	push	{r4, r5, r6, lr}
 8003e5e:	4e0f      	ldr	r6, [pc, #60]	@ (8003e9c <sbrk_aligned+0x40>)
 8003e60:	460c      	mov	r4, r1
 8003e62:	6831      	ldr	r1, [r6, #0]
 8003e64:	4605      	mov	r5, r0
 8003e66:	b911      	cbnz	r1, 8003e6e <sbrk_aligned+0x12>
 8003e68:	f000 f8e2 	bl	8004030 <_sbrk_r>
 8003e6c:	6030      	str	r0, [r6, #0]
 8003e6e:	4621      	mov	r1, r4
 8003e70:	4628      	mov	r0, r5
 8003e72:	f000 f8dd 	bl	8004030 <_sbrk_r>
 8003e76:	1c43      	adds	r3, r0, #1
 8003e78:	d103      	bne.n	8003e82 <sbrk_aligned+0x26>
 8003e7a:	f04f 34ff 	mov.w	r4, #4294967295
 8003e7e:	4620      	mov	r0, r4
 8003e80:	bd70      	pop	{r4, r5, r6, pc}
 8003e82:	1cc4      	adds	r4, r0, #3
 8003e84:	f024 0403 	bic.w	r4, r4, #3
 8003e88:	42a0      	cmp	r0, r4
 8003e8a:	d0f8      	beq.n	8003e7e <sbrk_aligned+0x22>
 8003e8c:	1a21      	subs	r1, r4, r0
 8003e8e:	4628      	mov	r0, r5
 8003e90:	f000 f8ce 	bl	8004030 <_sbrk_r>
 8003e94:	3001      	adds	r0, #1
 8003e96:	d1f2      	bne.n	8003e7e <sbrk_aligned+0x22>
 8003e98:	e7ef      	b.n	8003e7a <sbrk_aligned+0x1e>
 8003e9a:	bf00      	nop
 8003e9c:	200001b0 	.word	0x200001b0

08003ea0 <_malloc_r>:
 8003ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ea4:	1ccd      	adds	r5, r1, #3
 8003ea6:	f025 0503 	bic.w	r5, r5, #3
 8003eaa:	3508      	adds	r5, #8
 8003eac:	2d0c      	cmp	r5, #12
 8003eae:	bf38      	it	cc
 8003eb0:	250c      	movcc	r5, #12
 8003eb2:	2d00      	cmp	r5, #0
 8003eb4:	4606      	mov	r6, r0
 8003eb6:	db01      	blt.n	8003ebc <_malloc_r+0x1c>
 8003eb8:	42a9      	cmp	r1, r5
 8003eba:	d904      	bls.n	8003ec6 <_malloc_r+0x26>
 8003ebc:	230c      	movs	r3, #12
 8003ebe:	6033      	str	r3, [r6, #0]
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ec6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f9c <_malloc_r+0xfc>
 8003eca:	f000 f869 	bl	8003fa0 <__malloc_lock>
 8003ece:	f8d8 3000 	ldr.w	r3, [r8]
 8003ed2:	461c      	mov	r4, r3
 8003ed4:	bb44      	cbnz	r4, 8003f28 <_malloc_r+0x88>
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	4630      	mov	r0, r6
 8003eda:	f7ff ffbf 	bl	8003e5c <sbrk_aligned>
 8003ede:	1c43      	adds	r3, r0, #1
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	d158      	bne.n	8003f96 <_malloc_r+0xf6>
 8003ee4:	f8d8 4000 	ldr.w	r4, [r8]
 8003ee8:	4627      	mov	r7, r4
 8003eea:	2f00      	cmp	r7, #0
 8003eec:	d143      	bne.n	8003f76 <_malloc_r+0xd6>
 8003eee:	2c00      	cmp	r4, #0
 8003ef0:	d04b      	beq.n	8003f8a <_malloc_r+0xea>
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	4639      	mov	r1, r7
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	eb04 0903 	add.w	r9, r4, r3
 8003efc:	f000 f898 	bl	8004030 <_sbrk_r>
 8003f00:	4581      	cmp	r9, r0
 8003f02:	d142      	bne.n	8003f8a <_malloc_r+0xea>
 8003f04:	6821      	ldr	r1, [r4, #0]
 8003f06:	1a6d      	subs	r5, r5, r1
 8003f08:	4629      	mov	r1, r5
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	f7ff ffa6 	bl	8003e5c <sbrk_aligned>
 8003f10:	3001      	adds	r0, #1
 8003f12:	d03a      	beq.n	8003f8a <_malloc_r+0xea>
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	442b      	add	r3, r5
 8003f18:	6023      	str	r3, [r4, #0]
 8003f1a:	f8d8 3000 	ldr.w	r3, [r8]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	bb62      	cbnz	r2, 8003f7c <_malloc_r+0xdc>
 8003f22:	f8c8 7000 	str.w	r7, [r8]
 8003f26:	e00f      	b.n	8003f48 <_malloc_r+0xa8>
 8003f28:	6822      	ldr	r2, [r4, #0]
 8003f2a:	1b52      	subs	r2, r2, r5
 8003f2c:	d420      	bmi.n	8003f70 <_malloc_r+0xd0>
 8003f2e:	2a0b      	cmp	r2, #11
 8003f30:	d917      	bls.n	8003f62 <_malloc_r+0xc2>
 8003f32:	1961      	adds	r1, r4, r5
 8003f34:	42a3      	cmp	r3, r4
 8003f36:	6025      	str	r5, [r4, #0]
 8003f38:	bf18      	it	ne
 8003f3a:	6059      	strne	r1, [r3, #4]
 8003f3c:	6863      	ldr	r3, [r4, #4]
 8003f3e:	bf08      	it	eq
 8003f40:	f8c8 1000 	streq.w	r1, [r8]
 8003f44:	5162      	str	r2, [r4, r5]
 8003f46:	604b      	str	r3, [r1, #4]
 8003f48:	4630      	mov	r0, r6
 8003f4a:	f000 f82f 	bl	8003fac <__malloc_unlock>
 8003f4e:	f104 000b 	add.w	r0, r4, #11
 8003f52:	1d23      	adds	r3, r4, #4
 8003f54:	f020 0007 	bic.w	r0, r0, #7
 8003f58:	1ac2      	subs	r2, r0, r3
 8003f5a:	bf1c      	itt	ne
 8003f5c:	1a1b      	subne	r3, r3, r0
 8003f5e:	50a3      	strne	r3, [r4, r2]
 8003f60:	e7af      	b.n	8003ec2 <_malloc_r+0x22>
 8003f62:	6862      	ldr	r2, [r4, #4]
 8003f64:	42a3      	cmp	r3, r4
 8003f66:	bf0c      	ite	eq
 8003f68:	f8c8 2000 	streq.w	r2, [r8]
 8003f6c:	605a      	strne	r2, [r3, #4]
 8003f6e:	e7eb      	b.n	8003f48 <_malloc_r+0xa8>
 8003f70:	4623      	mov	r3, r4
 8003f72:	6864      	ldr	r4, [r4, #4]
 8003f74:	e7ae      	b.n	8003ed4 <_malloc_r+0x34>
 8003f76:	463c      	mov	r4, r7
 8003f78:	687f      	ldr	r7, [r7, #4]
 8003f7a:	e7b6      	b.n	8003eea <_malloc_r+0x4a>
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	42a3      	cmp	r3, r4
 8003f82:	d1fb      	bne.n	8003f7c <_malloc_r+0xdc>
 8003f84:	2300      	movs	r3, #0
 8003f86:	6053      	str	r3, [r2, #4]
 8003f88:	e7de      	b.n	8003f48 <_malloc_r+0xa8>
 8003f8a:	230c      	movs	r3, #12
 8003f8c:	6033      	str	r3, [r6, #0]
 8003f8e:	4630      	mov	r0, r6
 8003f90:	f000 f80c 	bl	8003fac <__malloc_unlock>
 8003f94:	e794      	b.n	8003ec0 <_malloc_r+0x20>
 8003f96:	6005      	str	r5, [r0, #0]
 8003f98:	e7d6      	b.n	8003f48 <_malloc_r+0xa8>
 8003f9a:	bf00      	nop
 8003f9c:	200001b4 	.word	0x200001b4

08003fa0 <__malloc_lock>:
 8003fa0:	4801      	ldr	r0, [pc, #4]	@ (8003fa8 <__malloc_lock+0x8>)
 8003fa2:	f000 b87f 	b.w	80040a4 <__retarget_lock_acquire_recursive>
 8003fa6:	bf00      	nop
 8003fa8:	200002f4 	.word	0x200002f4

08003fac <__malloc_unlock>:
 8003fac:	4801      	ldr	r0, [pc, #4]	@ (8003fb4 <__malloc_unlock+0x8>)
 8003fae:	f000 b87a 	b.w	80040a6 <__retarget_lock_release_recursive>
 8003fb2:	bf00      	nop
 8003fb4:	200002f4 	.word	0x200002f4

08003fb8 <siprintf>:
 8003fb8:	b40e      	push	{r1, r2, r3}
 8003fba:	b500      	push	{lr}
 8003fbc:	b09c      	sub	sp, #112	@ 0x70
 8003fbe:	ab1d      	add	r3, sp, #116	@ 0x74
 8003fc0:	9002      	str	r0, [sp, #8]
 8003fc2:	9006      	str	r0, [sp, #24]
 8003fc4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003fc8:	4809      	ldr	r0, [pc, #36]	@ (8003ff0 <siprintf+0x38>)
 8003fca:	9107      	str	r1, [sp, #28]
 8003fcc:	9104      	str	r1, [sp, #16]
 8003fce:	4909      	ldr	r1, [pc, #36]	@ (8003ff4 <siprintf+0x3c>)
 8003fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fd4:	9105      	str	r1, [sp, #20]
 8003fd6:	6800      	ldr	r0, [r0, #0]
 8003fd8:	9301      	str	r3, [sp, #4]
 8003fda:	a902      	add	r1, sp, #8
 8003fdc:	f000 f90a 	bl	80041f4 <_svfiprintf_r>
 8003fe0:	9b02      	ldr	r3, [sp, #8]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	b01c      	add	sp, #112	@ 0x70
 8003fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fec:	b003      	add	sp, #12
 8003fee:	4770      	bx	lr
 8003ff0:	20000010 	.word	0x20000010
 8003ff4:	ffff0208 	.word	0xffff0208

08003ff8 <memset>:
 8003ff8:	4402      	add	r2, r0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d100      	bne.n	8004002 <memset+0xa>
 8004000:	4770      	bx	lr
 8004002:	f803 1b01 	strb.w	r1, [r3], #1
 8004006:	e7f9      	b.n	8003ffc <memset+0x4>

08004008 <strncpy>:
 8004008:	b510      	push	{r4, lr}
 800400a:	3901      	subs	r1, #1
 800400c:	4603      	mov	r3, r0
 800400e:	b132      	cbz	r2, 800401e <strncpy+0x16>
 8004010:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004014:	f803 4b01 	strb.w	r4, [r3], #1
 8004018:	3a01      	subs	r2, #1
 800401a:	2c00      	cmp	r4, #0
 800401c:	d1f7      	bne.n	800400e <strncpy+0x6>
 800401e:	441a      	add	r2, r3
 8004020:	2100      	movs	r1, #0
 8004022:	4293      	cmp	r3, r2
 8004024:	d100      	bne.n	8004028 <strncpy+0x20>
 8004026:	bd10      	pop	{r4, pc}
 8004028:	f803 1b01 	strb.w	r1, [r3], #1
 800402c:	e7f9      	b.n	8004022 <strncpy+0x1a>
	...

08004030 <_sbrk_r>:
 8004030:	b538      	push	{r3, r4, r5, lr}
 8004032:	4d06      	ldr	r5, [pc, #24]	@ (800404c <_sbrk_r+0x1c>)
 8004034:	2300      	movs	r3, #0
 8004036:	4604      	mov	r4, r0
 8004038:	4608      	mov	r0, r1
 800403a:	602b      	str	r3, [r5, #0]
 800403c:	f7fc ff38 	bl	8000eb0 <_sbrk>
 8004040:	1c43      	adds	r3, r0, #1
 8004042:	d102      	bne.n	800404a <_sbrk_r+0x1a>
 8004044:	682b      	ldr	r3, [r5, #0]
 8004046:	b103      	cbz	r3, 800404a <_sbrk_r+0x1a>
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	bd38      	pop	{r3, r4, r5, pc}
 800404c:	200002f0 	.word	0x200002f0

08004050 <__errno>:
 8004050:	4b01      	ldr	r3, [pc, #4]	@ (8004058 <__errno+0x8>)
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	20000010 	.word	0x20000010

0800405c <__libc_init_array>:
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	4d0d      	ldr	r5, [pc, #52]	@ (8004094 <__libc_init_array+0x38>)
 8004060:	4c0d      	ldr	r4, [pc, #52]	@ (8004098 <__libc_init_array+0x3c>)
 8004062:	1b64      	subs	r4, r4, r5
 8004064:	10a4      	asrs	r4, r4, #2
 8004066:	2600      	movs	r6, #0
 8004068:	42a6      	cmp	r6, r4
 800406a:	d109      	bne.n	8004080 <__libc_init_array+0x24>
 800406c:	4d0b      	ldr	r5, [pc, #44]	@ (800409c <__libc_init_array+0x40>)
 800406e:	4c0c      	ldr	r4, [pc, #48]	@ (80040a0 <__libc_init_array+0x44>)
 8004070:	f000 fba8 	bl	80047c4 <_init>
 8004074:	1b64      	subs	r4, r4, r5
 8004076:	10a4      	asrs	r4, r4, #2
 8004078:	2600      	movs	r6, #0
 800407a:	42a6      	cmp	r6, r4
 800407c:	d105      	bne.n	800408a <__libc_init_array+0x2e>
 800407e:	bd70      	pop	{r4, r5, r6, pc}
 8004080:	f855 3b04 	ldr.w	r3, [r5], #4
 8004084:	4798      	blx	r3
 8004086:	3601      	adds	r6, #1
 8004088:	e7ee      	b.n	8004068 <__libc_init_array+0xc>
 800408a:	f855 3b04 	ldr.w	r3, [r5], #4
 800408e:	4798      	blx	r3
 8004090:	3601      	adds	r6, #1
 8004092:	e7f2      	b.n	800407a <__libc_init_array+0x1e>
 8004094:	080048a8 	.word	0x080048a8
 8004098:	080048a8 	.word	0x080048a8
 800409c:	080048a8 	.word	0x080048a8
 80040a0:	080048ac 	.word	0x080048ac

080040a4 <__retarget_lock_acquire_recursive>:
 80040a4:	4770      	bx	lr

080040a6 <__retarget_lock_release_recursive>:
 80040a6:	4770      	bx	lr

080040a8 <_free_r>:
 80040a8:	b538      	push	{r3, r4, r5, lr}
 80040aa:	4605      	mov	r5, r0
 80040ac:	2900      	cmp	r1, #0
 80040ae:	d041      	beq.n	8004134 <_free_r+0x8c>
 80040b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b4:	1f0c      	subs	r4, r1, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	bfb8      	it	lt
 80040ba:	18e4      	addlt	r4, r4, r3
 80040bc:	f7ff ff70 	bl	8003fa0 <__malloc_lock>
 80040c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004138 <_free_r+0x90>)
 80040c2:	6813      	ldr	r3, [r2, #0]
 80040c4:	b933      	cbnz	r3, 80040d4 <_free_r+0x2c>
 80040c6:	6063      	str	r3, [r4, #4]
 80040c8:	6014      	str	r4, [r2, #0]
 80040ca:	4628      	mov	r0, r5
 80040cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040d0:	f7ff bf6c 	b.w	8003fac <__malloc_unlock>
 80040d4:	42a3      	cmp	r3, r4
 80040d6:	d908      	bls.n	80040ea <_free_r+0x42>
 80040d8:	6820      	ldr	r0, [r4, #0]
 80040da:	1821      	adds	r1, r4, r0
 80040dc:	428b      	cmp	r3, r1
 80040de:	bf01      	itttt	eq
 80040e0:	6819      	ldreq	r1, [r3, #0]
 80040e2:	685b      	ldreq	r3, [r3, #4]
 80040e4:	1809      	addeq	r1, r1, r0
 80040e6:	6021      	streq	r1, [r4, #0]
 80040e8:	e7ed      	b.n	80040c6 <_free_r+0x1e>
 80040ea:	461a      	mov	r2, r3
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	b10b      	cbz	r3, 80040f4 <_free_r+0x4c>
 80040f0:	42a3      	cmp	r3, r4
 80040f2:	d9fa      	bls.n	80040ea <_free_r+0x42>
 80040f4:	6811      	ldr	r1, [r2, #0]
 80040f6:	1850      	adds	r0, r2, r1
 80040f8:	42a0      	cmp	r0, r4
 80040fa:	d10b      	bne.n	8004114 <_free_r+0x6c>
 80040fc:	6820      	ldr	r0, [r4, #0]
 80040fe:	4401      	add	r1, r0
 8004100:	1850      	adds	r0, r2, r1
 8004102:	4283      	cmp	r3, r0
 8004104:	6011      	str	r1, [r2, #0]
 8004106:	d1e0      	bne.n	80040ca <_free_r+0x22>
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	6053      	str	r3, [r2, #4]
 800410e:	4408      	add	r0, r1
 8004110:	6010      	str	r0, [r2, #0]
 8004112:	e7da      	b.n	80040ca <_free_r+0x22>
 8004114:	d902      	bls.n	800411c <_free_r+0x74>
 8004116:	230c      	movs	r3, #12
 8004118:	602b      	str	r3, [r5, #0]
 800411a:	e7d6      	b.n	80040ca <_free_r+0x22>
 800411c:	6820      	ldr	r0, [r4, #0]
 800411e:	1821      	adds	r1, r4, r0
 8004120:	428b      	cmp	r3, r1
 8004122:	bf04      	itt	eq
 8004124:	6819      	ldreq	r1, [r3, #0]
 8004126:	685b      	ldreq	r3, [r3, #4]
 8004128:	6063      	str	r3, [r4, #4]
 800412a:	bf04      	itt	eq
 800412c:	1809      	addeq	r1, r1, r0
 800412e:	6021      	streq	r1, [r4, #0]
 8004130:	6054      	str	r4, [r2, #4]
 8004132:	e7ca      	b.n	80040ca <_free_r+0x22>
 8004134:	bd38      	pop	{r3, r4, r5, pc}
 8004136:	bf00      	nop
 8004138:	200001b4 	.word	0x200001b4

0800413c <__ssputs_r>:
 800413c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004140:	688e      	ldr	r6, [r1, #8]
 8004142:	461f      	mov	r7, r3
 8004144:	42be      	cmp	r6, r7
 8004146:	680b      	ldr	r3, [r1, #0]
 8004148:	4682      	mov	sl, r0
 800414a:	460c      	mov	r4, r1
 800414c:	4690      	mov	r8, r2
 800414e:	d82d      	bhi.n	80041ac <__ssputs_r+0x70>
 8004150:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004154:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004158:	d026      	beq.n	80041a8 <__ssputs_r+0x6c>
 800415a:	6965      	ldr	r5, [r4, #20]
 800415c:	6909      	ldr	r1, [r1, #16]
 800415e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004162:	eba3 0901 	sub.w	r9, r3, r1
 8004166:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800416a:	1c7b      	adds	r3, r7, #1
 800416c:	444b      	add	r3, r9
 800416e:	106d      	asrs	r5, r5, #1
 8004170:	429d      	cmp	r5, r3
 8004172:	bf38      	it	cc
 8004174:	461d      	movcc	r5, r3
 8004176:	0553      	lsls	r3, r2, #21
 8004178:	d527      	bpl.n	80041ca <__ssputs_r+0x8e>
 800417a:	4629      	mov	r1, r5
 800417c:	f7ff fe90 	bl	8003ea0 <_malloc_r>
 8004180:	4606      	mov	r6, r0
 8004182:	b360      	cbz	r0, 80041de <__ssputs_r+0xa2>
 8004184:	6921      	ldr	r1, [r4, #16]
 8004186:	464a      	mov	r2, r9
 8004188:	f000 fad8 	bl	800473c <memcpy>
 800418c:	89a3      	ldrh	r3, [r4, #12]
 800418e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004196:	81a3      	strh	r3, [r4, #12]
 8004198:	6126      	str	r6, [r4, #16]
 800419a:	6165      	str	r5, [r4, #20]
 800419c:	444e      	add	r6, r9
 800419e:	eba5 0509 	sub.w	r5, r5, r9
 80041a2:	6026      	str	r6, [r4, #0]
 80041a4:	60a5      	str	r5, [r4, #8]
 80041a6:	463e      	mov	r6, r7
 80041a8:	42be      	cmp	r6, r7
 80041aa:	d900      	bls.n	80041ae <__ssputs_r+0x72>
 80041ac:	463e      	mov	r6, r7
 80041ae:	6820      	ldr	r0, [r4, #0]
 80041b0:	4632      	mov	r2, r6
 80041b2:	4641      	mov	r1, r8
 80041b4:	f000 faa8 	bl	8004708 <memmove>
 80041b8:	68a3      	ldr	r3, [r4, #8]
 80041ba:	1b9b      	subs	r3, r3, r6
 80041bc:	60a3      	str	r3, [r4, #8]
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	4433      	add	r3, r6
 80041c2:	6023      	str	r3, [r4, #0]
 80041c4:	2000      	movs	r0, #0
 80041c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ca:	462a      	mov	r2, r5
 80041cc:	f000 fac4 	bl	8004758 <_realloc_r>
 80041d0:	4606      	mov	r6, r0
 80041d2:	2800      	cmp	r0, #0
 80041d4:	d1e0      	bne.n	8004198 <__ssputs_r+0x5c>
 80041d6:	6921      	ldr	r1, [r4, #16]
 80041d8:	4650      	mov	r0, sl
 80041da:	f7ff ff65 	bl	80040a8 <_free_r>
 80041de:	230c      	movs	r3, #12
 80041e0:	f8ca 3000 	str.w	r3, [sl]
 80041e4:	89a3      	ldrh	r3, [r4, #12]
 80041e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041ea:	81a3      	strh	r3, [r4, #12]
 80041ec:	f04f 30ff 	mov.w	r0, #4294967295
 80041f0:	e7e9      	b.n	80041c6 <__ssputs_r+0x8a>
	...

080041f4 <_svfiprintf_r>:
 80041f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f8:	4698      	mov	r8, r3
 80041fa:	898b      	ldrh	r3, [r1, #12]
 80041fc:	061b      	lsls	r3, r3, #24
 80041fe:	b09d      	sub	sp, #116	@ 0x74
 8004200:	4607      	mov	r7, r0
 8004202:	460d      	mov	r5, r1
 8004204:	4614      	mov	r4, r2
 8004206:	d510      	bpl.n	800422a <_svfiprintf_r+0x36>
 8004208:	690b      	ldr	r3, [r1, #16]
 800420a:	b973      	cbnz	r3, 800422a <_svfiprintf_r+0x36>
 800420c:	2140      	movs	r1, #64	@ 0x40
 800420e:	f7ff fe47 	bl	8003ea0 <_malloc_r>
 8004212:	6028      	str	r0, [r5, #0]
 8004214:	6128      	str	r0, [r5, #16]
 8004216:	b930      	cbnz	r0, 8004226 <_svfiprintf_r+0x32>
 8004218:	230c      	movs	r3, #12
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	f04f 30ff 	mov.w	r0, #4294967295
 8004220:	b01d      	add	sp, #116	@ 0x74
 8004222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004226:	2340      	movs	r3, #64	@ 0x40
 8004228:	616b      	str	r3, [r5, #20]
 800422a:	2300      	movs	r3, #0
 800422c:	9309      	str	r3, [sp, #36]	@ 0x24
 800422e:	2320      	movs	r3, #32
 8004230:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004234:	f8cd 800c 	str.w	r8, [sp, #12]
 8004238:	2330      	movs	r3, #48	@ 0x30
 800423a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80043d8 <_svfiprintf_r+0x1e4>
 800423e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004242:	f04f 0901 	mov.w	r9, #1
 8004246:	4623      	mov	r3, r4
 8004248:	469a      	mov	sl, r3
 800424a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800424e:	b10a      	cbz	r2, 8004254 <_svfiprintf_r+0x60>
 8004250:	2a25      	cmp	r2, #37	@ 0x25
 8004252:	d1f9      	bne.n	8004248 <_svfiprintf_r+0x54>
 8004254:	ebba 0b04 	subs.w	fp, sl, r4
 8004258:	d00b      	beq.n	8004272 <_svfiprintf_r+0x7e>
 800425a:	465b      	mov	r3, fp
 800425c:	4622      	mov	r2, r4
 800425e:	4629      	mov	r1, r5
 8004260:	4638      	mov	r0, r7
 8004262:	f7ff ff6b 	bl	800413c <__ssputs_r>
 8004266:	3001      	adds	r0, #1
 8004268:	f000 80a7 	beq.w	80043ba <_svfiprintf_r+0x1c6>
 800426c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800426e:	445a      	add	r2, fp
 8004270:	9209      	str	r2, [sp, #36]	@ 0x24
 8004272:	f89a 3000 	ldrb.w	r3, [sl]
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 809f 	beq.w	80043ba <_svfiprintf_r+0x1c6>
 800427c:	2300      	movs	r3, #0
 800427e:	f04f 32ff 	mov.w	r2, #4294967295
 8004282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004286:	f10a 0a01 	add.w	sl, sl, #1
 800428a:	9304      	str	r3, [sp, #16]
 800428c:	9307      	str	r3, [sp, #28]
 800428e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004292:	931a      	str	r3, [sp, #104]	@ 0x68
 8004294:	4654      	mov	r4, sl
 8004296:	2205      	movs	r2, #5
 8004298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800429c:	484e      	ldr	r0, [pc, #312]	@ (80043d8 <_svfiprintf_r+0x1e4>)
 800429e:	f7fb ffbf 	bl	8000220 <memchr>
 80042a2:	9a04      	ldr	r2, [sp, #16]
 80042a4:	b9d8      	cbnz	r0, 80042de <_svfiprintf_r+0xea>
 80042a6:	06d0      	lsls	r0, r2, #27
 80042a8:	bf44      	itt	mi
 80042aa:	2320      	movmi	r3, #32
 80042ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042b0:	0711      	lsls	r1, r2, #28
 80042b2:	bf44      	itt	mi
 80042b4:	232b      	movmi	r3, #43	@ 0x2b
 80042b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042ba:	f89a 3000 	ldrb.w	r3, [sl]
 80042be:	2b2a      	cmp	r3, #42	@ 0x2a
 80042c0:	d015      	beq.n	80042ee <_svfiprintf_r+0xfa>
 80042c2:	9a07      	ldr	r2, [sp, #28]
 80042c4:	4654      	mov	r4, sl
 80042c6:	2000      	movs	r0, #0
 80042c8:	f04f 0c0a 	mov.w	ip, #10
 80042cc:	4621      	mov	r1, r4
 80042ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042d2:	3b30      	subs	r3, #48	@ 0x30
 80042d4:	2b09      	cmp	r3, #9
 80042d6:	d94b      	bls.n	8004370 <_svfiprintf_r+0x17c>
 80042d8:	b1b0      	cbz	r0, 8004308 <_svfiprintf_r+0x114>
 80042da:	9207      	str	r2, [sp, #28]
 80042dc:	e014      	b.n	8004308 <_svfiprintf_r+0x114>
 80042de:	eba0 0308 	sub.w	r3, r0, r8
 80042e2:	fa09 f303 	lsl.w	r3, r9, r3
 80042e6:	4313      	orrs	r3, r2
 80042e8:	9304      	str	r3, [sp, #16]
 80042ea:	46a2      	mov	sl, r4
 80042ec:	e7d2      	b.n	8004294 <_svfiprintf_r+0xa0>
 80042ee:	9b03      	ldr	r3, [sp, #12]
 80042f0:	1d19      	adds	r1, r3, #4
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	9103      	str	r1, [sp, #12]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	bfbb      	ittet	lt
 80042fa:	425b      	neglt	r3, r3
 80042fc:	f042 0202 	orrlt.w	r2, r2, #2
 8004300:	9307      	strge	r3, [sp, #28]
 8004302:	9307      	strlt	r3, [sp, #28]
 8004304:	bfb8      	it	lt
 8004306:	9204      	strlt	r2, [sp, #16]
 8004308:	7823      	ldrb	r3, [r4, #0]
 800430a:	2b2e      	cmp	r3, #46	@ 0x2e
 800430c:	d10a      	bne.n	8004324 <_svfiprintf_r+0x130>
 800430e:	7863      	ldrb	r3, [r4, #1]
 8004310:	2b2a      	cmp	r3, #42	@ 0x2a
 8004312:	d132      	bne.n	800437a <_svfiprintf_r+0x186>
 8004314:	9b03      	ldr	r3, [sp, #12]
 8004316:	1d1a      	adds	r2, r3, #4
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	9203      	str	r2, [sp, #12]
 800431c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004320:	3402      	adds	r4, #2
 8004322:	9305      	str	r3, [sp, #20]
 8004324:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80043e8 <_svfiprintf_r+0x1f4>
 8004328:	7821      	ldrb	r1, [r4, #0]
 800432a:	2203      	movs	r2, #3
 800432c:	4650      	mov	r0, sl
 800432e:	f7fb ff77 	bl	8000220 <memchr>
 8004332:	b138      	cbz	r0, 8004344 <_svfiprintf_r+0x150>
 8004334:	9b04      	ldr	r3, [sp, #16]
 8004336:	eba0 000a 	sub.w	r0, r0, sl
 800433a:	2240      	movs	r2, #64	@ 0x40
 800433c:	4082      	lsls	r2, r0
 800433e:	4313      	orrs	r3, r2
 8004340:	3401      	adds	r4, #1
 8004342:	9304      	str	r3, [sp, #16]
 8004344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004348:	4824      	ldr	r0, [pc, #144]	@ (80043dc <_svfiprintf_r+0x1e8>)
 800434a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800434e:	2206      	movs	r2, #6
 8004350:	f7fb ff66 	bl	8000220 <memchr>
 8004354:	2800      	cmp	r0, #0
 8004356:	d036      	beq.n	80043c6 <_svfiprintf_r+0x1d2>
 8004358:	4b21      	ldr	r3, [pc, #132]	@ (80043e0 <_svfiprintf_r+0x1ec>)
 800435a:	bb1b      	cbnz	r3, 80043a4 <_svfiprintf_r+0x1b0>
 800435c:	9b03      	ldr	r3, [sp, #12]
 800435e:	3307      	adds	r3, #7
 8004360:	f023 0307 	bic.w	r3, r3, #7
 8004364:	3308      	adds	r3, #8
 8004366:	9303      	str	r3, [sp, #12]
 8004368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800436a:	4433      	add	r3, r6
 800436c:	9309      	str	r3, [sp, #36]	@ 0x24
 800436e:	e76a      	b.n	8004246 <_svfiprintf_r+0x52>
 8004370:	fb0c 3202 	mla	r2, ip, r2, r3
 8004374:	460c      	mov	r4, r1
 8004376:	2001      	movs	r0, #1
 8004378:	e7a8      	b.n	80042cc <_svfiprintf_r+0xd8>
 800437a:	2300      	movs	r3, #0
 800437c:	3401      	adds	r4, #1
 800437e:	9305      	str	r3, [sp, #20]
 8004380:	4619      	mov	r1, r3
 8004382:	f04f 0c0a 	mov.w	ip, #10
 8004386:	4620      	mov	r0, r4
 8004388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800438c:	3a30      	subs	r2, #48	@ 0x30
 800438e:	2a09      	cmp	r2, #9
 8004390:	d903      	bls.n	800439a <_svfiprintf_r+0x1a6>
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0c6      	beq.n	8004324 <_svfiprintf_r+0x130>
 8004396:	9105      	str	r1, [sp, #20]
 8004398:	e7c4      	b.n	8004324 <_svfiprintf_r+0x130>
 800439a:	fb0c 2101 	mla	r1, ip, r1, r2
 800439e:	4604      	mov	r4, r0
 80043a0:	2301      	movs	r3, #1
 80043a2:	e7f0      	b.n	8004386 <_svfiprintf_r+0x192>
 80043a4:	ab03      	add	r3, sp, #12
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	462a      	mov	r2, r5
 80043aa:	4b0e      	ldr	r3, [pc, #56]	@ (80043e4 <_svfiprintf_r+0x1f0>)
 80043ac:	a904      	add	r1, sp, #16
 80043ae:	4638      	mov	r0, r7
 80043b0:	f3af 8000 	nop.w
 80043b4:	1c42      	adds	r2, r0, #1
 80043b6:	4606      	mov	r6, r0
 80043b8:	d1d6      	bne.n	8004368 <_svfiprintf_r+0x174>
 80043ba:	89ab      	ldrh	r3, [r5, #12]
 80043bc:	065b      	lsls	r3, r3, #25
 80043be:	f53f af2d 	bmi.w	800421c <_svfiprintf_r+0x28>
 80043c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80043c4:	e72c      	b.n	8004220 <_svfiprintf_r+0x2c>
 80043c6:	ab03      	add	r3, sp, #12
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	462a      	mov	r2, r5
 80043cc:	4b05      	ldr	r3, [pc, #20]	@ (80043e4 <_svfiprintf_r+0x1f0>)
 80043ce:	a904      	add	r1, sp, #16
 80043d0:	4638      	mov	r0, r7
 80043d2:	f000 f879 	bl	80044c8 <_printf_i>
 80043d6:	e7ed      	b.n	80043b4 <_svfiprintf_r+0x1c0>
 80043d8:	0800486c 	.word	0x0800486c
 80043dc:	08004876 	.word	0x08004876
 80043e0:	00000000 	.word	0x00000000
 80043e4:	0800413d 	.word	0x0800413d
 80043e8:	08004872 	.word	0x08004872

080043ec <_printf_common>:
 80043ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043f0:	4616      	mov	r6, r2
 80043f2:	4698      	mov	r8, r3
 80043f4:	688a      	ldr	r2, [r1, #8]
 80043f6:	690b      	ldr	r3, [r1, #16]
 80043f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043fc:	4293      	cmp	r3, r2
 80043fe:	bfb8      	it	lt
 8004400:	4613      	movlt	r3, r2
 8004402:	6033      	str	r3, [r6, #0]
 8004404:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004408:	4607      	mov	r7, r0
 800440a:	460c      	mov	r4, r1
 800440c:	b10a      	cbz	r2, 8004412 <_printf_common+0x26>
 800440e:	3301      	adds	r3, #1
 8004410:	6033      	str	r3, [r6, #0]
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	0699      	lsls	r1, r3, #26
 8004416:	bf42      	ittt	mi
 8004418:	6833      	ldrmi	r3, [r6, #0]
 800441a:	3302      	addmi	r3, #2
 800441c:	6033      	strmi	r3, [r6, #0]
 800441e:	6825      	ldr	r5, [r4, #0]
 8004420:	f015 0506 	ands.w	r5, r5, #6
 8004424:	d106      	bne.n	8004434 <_printf_common+0x48>
 8004426:	f104 0a19 	add.w	sl, r4, #25
 800442a:	68e3      	ldr	r3, [r4, #12]
 800442c:	6832      	ldr	r2, [r6, #0]
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	42ab      	cmp	r3, r5
 8004432:	dc26      	bgt.n	8004482 <_printf_common+0x96>
 8004434:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004438:	6822      	ldr	r2, [r4, #0]
 800443a:	3b00      	subs	r3, #0
 800443c:	bf18      	it	ne
 800443e:	2301      	movne	r3, #1
 8004440:	0692      	lsls	r2, r2, #26
 8004442:	d42b      	bmi.n	800449c <_printf_common+0xb0>
 8004444:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004448:	4641      	mov	r1, r8
 800444a:	4638      	mov	r0, r7
 800444c:	47c8      	blx	r9
 800444e:	3001      	adds	r0, #1
 8004450:	d01e      	beq.n	8004490 <_printf_common+0xa4>
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	6922      	ldr	r2, [r4, #16]
 8004456:	f003 0306 	and.w	r3, r3, #6
 800445a:	2b04      	cmp	r3, #4
 800445c:	bf02      	ittt	eq
 800445e:	68e5      	ldreq	r5, [r4, #12]
 8004460:	6833      	ldreq	r3, [r6, #0]
 8004462:	1aed      	subeq	r5, r5, r3
 8004464:	68a3      	ldr	r3, [r4, #8]
 8004466:	bf0c      	ite	eq
 8004468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800446c:	2500      	movne	r5, #0
 800446e:	4293      	cmp	r3, r2
 8004470:	bfc4      	itt	gt
 8004472:	1a9b      	subgt	r3, r3, r2
 8004474:	18ed      	addgt	r5, r5, r3
 8004476:	2600      	movs	r6, #0
 8004478:	341a      	adds	r4, #26
 800447a:	42b5      	cmp	r5, r6
 800447c:	d11a      	bne.n	80044b4 <_printf_common+0xc8>
 800447e:	2000      	movs	r0, #0
 8004480:	e008      	b.n	8004494 <_printf_common+0xa8>
 8004482:	2301      	movs	r3, #1
 8004484:	4652      	mov	r2, sl
 8004486:	4641      	mov	r1, r8
 8004488:	4638      	mov	r0, r7
 800448a:	47c8      	blx	r9
 800448c:	3001      	adds	r0, #1
 800448e:	d103      	bne.n	8004498 <_printf_common+0xac>
 8004490:	f04f 30ff 	mov.w	r0, #4294967295
 8004494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004498:	3501      	adds	r5, #1
 800449a:	e7c6      	b.n	800442a <_printf_common+0x3e>
 800449c:	18e1      	adds	r1, r4, r3
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	2030      	movs	r0, #48	@ 0x30
 80044a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044a6:	4422      	add	r2, r4
 80044a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044b0:	3302      	adds	r3, #2
 80044b2:	e7c7      	b.n	8004444 <_printf_common+0x58>
 80044b4:	2301      	movs	r3, #1
 80044b6:	4622      	mov	r2, r4
 80044b8:	4641      	mov	r1, r8
 80044ba:	4638      	mov	r0, r7
 80044bc:	47c8      	blx	r9
 80044be:	3001      	adds	r0, #1
 80044c0:	d0e6      	beq.n	8004490 <_printf_common+0xa4>
 80044c2:	3601      	adds	r6, #1
 80044c4:	e7d9      	b.n	800447a <_printf_common+0x8e>
	...

080044c8 <_printf_i>:
 80044c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044cc:	7e0f      	ldrb	r7, [r1, #24]
 80044ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044d0:	2f78      	cmp	r7, #120	@ 0x78
 80044d2:	4691      	mov	r9, r2
 80044d4:	4680      	mov	r8, r0
 80044d6:	460c      	mov	r4, r1
 80044d8:	469a      	mov	sl, r3
 80044da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044de:	d807      	bhi.n	80044f0 <_printf_i+0x28>
 80044e0:	2f62      	cmp	r7, #98	@ 0x62
 80044e2:	d80a      	bhi.n	80044fa <_printf_i+0x32>
 80044e4:	2f00      	cmp	r7, #0
 80044e6:	f000 80d2 	beq.w	800468e <_printf_i+0x1c6>
 80044ea:	2f58      	cmp	r7, #88	@ 0x58
 80044ec:	f000 80b9 	beq.w	8004662 <_printf_i+0x19a>
 80044f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044f8:	e03a      	b.n	8004570 <_printf_i+0xa8>
 80044fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044fe:	2b15      	cmp	r3, #21
 8004500:	d8f6      	bhi.n	80044f0 <_printf_i+0x28>
 8004502:	a101      	add	r1, pc, #4	@ (adr r1, 8004508 <_printf_i+0x40>)
 8004504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004508:	08004561 	.word	0x08004561
 800450c:	08004575 	.word	0x08004575
 8004510:	080044f1 	.word	0x080044f1
 8004514:	080044f1 	.word	0x080044f1
 8004518:	080044f1 	.word	0x080044f1
 800451c:	080044f1 	.word	0x080044f1
 8004520:	08004575 	.word	0x08004575
 8004524:	080044f1 	.word	0x080044f1
 8004528:	080044f1 	.word	0x080044f1
 800452c:	080044f1 	.word	0x080044f1
 8004530:	080044f1 	.word	0x080044f1
 8004534:	08004675 	.word	0x08004675
 8004538:	0800459f 	.word	0x0800459f
 800453c:	0800462f 	.word	0x0800462f
 8004540:	080044f1 	.word	0x080044f1
 8004544:	080044f1 	.word	0x080044f1
 8004548:	08004697 	.word	0x08004697
 800454c:	080044f1 	.word	0x080044f1
 8004550:	0800459f 	.word	0x0800459f
 8004554:	080044f1 	.word	0x080044f1
 8004558:	080044f1 	.word	0x080044f1
 800455c:	08004637 	.word	0x08004637
 8004560:	6833      	ldr	r3, [r6, #0]
 8004562:	1d1a      	adds	r2, r3, #4
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6032      	str	r2, [r6, #0]
 8004568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800456c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004570:	2301      	movs	r3, #1
 8004572:	e09d      	b.n	80046b0 <_printf_i+0x1e8>
 8004574:	6833      	ldr	r3, [r6, #0]
 8004576:	6820      	ldr	r0, [r4, #0]
 8004578:	1d19      	adds	r1, r3, #4
 800457a:	6031      	str	r1, [r6, #0]
 800457c:	0606      	lsls	r6, r0, #24
 800457e:	d501      	bpl.n	8004584 <_printf_i+0xbc>
 8004580:	681d      	ldr	r5, [r3, #0]
 8004582:	e003      	b.n	800458c <_printf_i+0xc4>
 8004584:	0645      	lsls	r5, r0, #25
 8004586:	d5fb      	bpl.n	8004580 <_printf_i+0xb8>
 8004588:	f9b3 5000 	ldrsh.w	r5, [r3]
 800458c:	2d00      	cmp	r5, #0
 800458e:	da03      	bge.n	8004598 <_printf_i+0xd0>
 8004590:	232d      	movs	r3, #45	@ 0x2d
 8004592:	426d      	negs	r5, r5
 8004594:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004598:	4859      	ldr	r0, [pc, #356]	@ (8004700 <_printf_i+0x238>)
 800459a:	230a      	movs	r3, #10
 800459c:	e011      	b.n	80045c2 <_printf_i+0xfa>
 800459e:	6821      	ldr	r1, [r4, #0]
 80045a0:	6833      	ldr	r3, [r6, #0]
 80045a2:	0608      	lsls	r0, r1, #24
 80045a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80045a8:	d402      	bmi.n	80045b0 <_printf_i+0xe8>
 80045aa:	0649      	lsls	r1, r1, #25
 80045ac:	bf48      	it	mi
 80045ae:	b2ad      	uxthmi	r5, r5
 80045b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80045b2:	4853      	ldr	r0, [pc, #332]	@ (8004700 <_printf_i+0x238>)
 80045b4:	6033      	str	r3, [r6, #0]
 80045b6:	bf14      	ite	ne
 80045b8:	230a      	movne	r3, #10
 80045ba:	2308      	moveq	r3, #8
 80045bc:	2100      	movs	r1, #0
 80045be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045c2:	6866      	ldr	r6, [r4, #4]
 80045c4:	60a6      	str	r6, [r4, #8]
 80045c6:	2e00      	cmp	r6, #0
 80045c8:	bfa2      	ittt	ge
 80045ca:	6821      	ldrge	r1, [r4, #0]
 80045cc:	f021 0104 	bicge.w	r1, r1, #4
 80045d0:	6021      	strge	r1, [r4, #0]
 80045d2:	b90d      	cbnz	r5, 80045d8 <_printf_i+0x110>
 80045d4:	2e00      	cmp	r6, #0
 80045d6:	d04b      	beq.n	8004670 <_printf_i+0x1a8>
 80045d8:	4616      	mov	r6, r2
 80045da:	fbb5 f1f3 	udiv	r1, r5, r3
 80045de:	fb03 5711 	mls	r7, r3, r1, r5
 80045e2:	5dc7      	ldrb	r7, [r0, r7]
 80045e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045e8:	462f      	mov	r7, r5
 80045ea:	42bb      	cmp	r3, r7
 80045ec:	460d      	mov	r5, r1
 80045ee:	d9f4      	bls.n	80045da <_printf_i+0x112>
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d10b      	bne.n	800460c <_printf_i+0x144>
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	07df      	lsls	r7, r3, #31
 80045f8:	d508      	bpl.n	800460c <_printf_i+0x144>
 80045fa:	6923      	ldr	r3, [r4, #16]
 80045fc:	6861      	ldr	r1, [r4, #4]
 80045fe:	4299      	cmp	r1, r3
 8004600:	bfde      	ittt	le
 8004602:	2330      	movle	r3, #48	@ 0x30
 8004604:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004608:	f106 36ff 	addle.w	r6, r6, #4294967295
 800460c:	1b92      	subs	r2, r2, r6
 800460e:	6122      	str	r2, [r4, #16]
 8004610:	f8cd a000 	str.w	sl, [sp]
 8004614:	464b      	mov	r3, r9
 8004616:	aa03      	add	r2, sp, #12
 8004618:	4621      	mov	r1, r4
 800461a:	4640      	mov	r0, r8
 800461c:	f7ff fee6 	bl	80043ec <_printf_common>
 8004620:	3001      	adds	r0, #1
 8004622:	d14a      	bne.n	80046ba <_printf_i+0x1f2>
 8004624:	f04f 30ff 	mov.w	r0, #4294967295
 8004628:	b004      	add	sp, #16
 800462a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	f043 0320 	orr.w	r3, r3, #32
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	4833      	ldr	r0, [pc, #204]	@ (8004704 <_printf_i+0x23c>)
 8004638:	2778      	movs	r7, #120	@ 0x78
 800463a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	6831      	ldr	r1, [r6, #0]
 8004642:	061f      	lsls	r7, r3, #24
 8004644:	f851 5b04 	ldr.w	r5, [r1], #4
 8004648:	d402      	bmi.n	8004650 <_printf_i+0x188>
 800464a:	065f      	lsls	r7, r3, #25
 800464c:	bf48      	it	mi
 800464e:	b2ad      	uxthmi	r5, r5
 8004650:	6031      	str	r1, [r6, #0]
 8004652:	07d9      	lsls	r1, r3, #31
 8004654:	bf44      	itt	mi
 8004656:	f043 0320 	orrmi.w	r3, r3, #32
 800465a:	6023      	strmi	r3, [r4, #0]
 800465c:	b11d      	cbz	r5, 8004666 <_printf_i+0x19e>
 800465e:	2310      	movs	r3, #16
 8004660:	e7ac      	b.n	80045bc <_printf_i+0xf4>
 8004662:	4827      	ldr	r0, [pc, #156]	@ (8004700 <_printf_i+0x238>)
 8004664:	e7e9      	b.n	800463a <_printf_i+0x172>
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	f023 0320 	bic.w	r3, r3, #32
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	e7f6      	b.n	800465e <_printf_i+0x196>
 8004670:	4616      	mov	r6, r2
 8004672:	e7bd      	b.n	80045f0 <_printf_i+0x128>
 8004674:	6833      	ldr	r3, [r6, #0]
 8004676:	6825      	ldr	r5, [r4, #0]
 8004678:	6961      	ldr	r1, [r4, #20]
 800467a:	1d18      	adds	r0, r3, #4
 800467c:	6030      	str	r0, [r6, #0]
 800467e:	062e      	lsls	r6, r5, #24
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	d501      	bpl.n	8004688 <_printf_i+0x1c0>
 8004684:	6019      	str	r1, [r3, #0]
 8004686:	e002      	b.n	800468e <_printf_i+0x1c6>
 8004688:	0668      	lsls	r0, r5, #25
 800468a:	d5fb      	bpl.n	8004684 <_printf_i+0x1bc>
 800468c:	8019      	strh	r1, [r3, #0]
 800468e:	2300      	movs	r3, #0
 8004690:	6123      	str	r3, [r4, #16]
 8004692:	4616      	mov	r6, r2
 8004694:	e7bc      	b.n	8004610 <_printf_i+0x148>
 8004696:	6833      	ldr	r3, [r6, #0]
 8004698:	1d1a      	adds	r2, r3, #4
 800469a:	6032      	str	r2, [r6, #0]
 800469c:	681e      	ldr	r6, [r3, #0]
 800469e:	6862      	ldr	r2, [r4, #4]
 80046a0:	2100      	movs	r1, #0
 80046a2:	4630      	mov	r0, r6
 80046a4:	f7fb fdbc 	bl	8000220 <memchr>
 80046a8:	b108      	cbz	r0, 80046ae <_printf_i+0x1e6>
 80046aa:	1b80      	subs	r0, r0, r6
 80046ac:	6060      	str	r0, [r4, #4]
 80046ae:	6863      	ldr	r3, [r4, #4]
 80046b0:	6123      	str	r3, [r4, #16]
 80046b2:	2300      	movs	r3, #0
 80046b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046b8:	e7aa      	b.n	8004610 <_printf_i+0x148>
 80046ba:	6923      	ldr	r3, [r4, #16]
 80046bc:	4632      	mov	r2, r6
 80046be:	4649      	mov	r1, r9
 80046c0:	4640      	mov	r0, r8
 80046c2:	47d0      	blx	sl
 80046c4:	3001      	adds	r0, #1
 80046c6:	d0ad      	beq.n	8004624 <_printf_i+0x15c>
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	079b      	lsls	r3, r3, #30
 80046cc:	d413      	bmi.n	80046f6 <_printf_i+0x22e>
 80046ce:	68e0      	ldr	r0, [r4, #12]
 80046d0:	9b03      	ldr	r3, [sp, #12]
 80046d2:	4298      	cmp	r0, r3
 80046d4:	bfb8      	it	lt
 80046d6:	4618      	movlt	r0, r3
 80046d8:	e7a6      	b.n	8004628 <_printf_i+0x160>
 80046da:	2301      	movs	r3, #1
 80046dc:	4632      	mov	r2, r6
 80046de:	4649      	mov	r1, r9
 80046e0:	4640      	mov	r0, r8
 80046e2:	47d0      	blx	sl
 80046e4:	3001      	adds	r0, #1
 80046e6:	d09d      	beq.n	8004624 <_printf_i+0x15c>
 80046e8:	3501      	adds	r5, #1
 80046ea:	68e3      	ldr	r3, [r4, #12]
 80046ec:	9903      	ldr	r1, [sp, #12]
 80046ee:	1a5b      	subs	r3, r3, r1
 80046f0:	42ab      	cmp	r3, r5
 80046f2:	dcf2      	bgt.n	80046da <_printf_i+0x212>
 80046f4:	e7eb      	b.n	80046ce <_printf_i+0x206>
 80046f6:	2500      	movs	r5, #0
 80046f8:	f104 0619 	add.w	r6, r4, #25
 80046fc:	e7f5      	b.n	80046ea <_printf_i+0x222>
 80046fe:	bf00      	nop
 8004700:	0800487d 	.word	0x0800487d
 8004704:	0800488e 	.word	0x0800488e

08004708 <memmove>:
 8004708:	4288      	cmp	r0, r1
 800470a:	b510      	push	{r4, lr}
 800470c:	eb01 0402 	add.w	r4, r1, r2
 8004710:	d902      	bls.n	8004718 <memmove+0x10>
 8004712:	4284      	cmp	r4, r0
 8004714:	4623      	mov	r3, r4
 8004716:	d807      	bhi.n	8004728 <memmove+0x20>
 8004718:	1e43      	subs	r3, r0, #1
 800471a:	42a1      	cmp	r1, r4
 800471c:	d008      	beq.n	8004730 <memmove+0x28>
 800471e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004722:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004726:	e7f8      	b.n	800471a <memmove+0x12>
 8004728:	4402      	add	r2, r0
 800472a:	4601      	mov	r1, r0
 800472c:	428a      	cmp	r2, r1
 800472e:	d100      	bne.n	8004732 <memmove+0x2a>
 8004730:	bd10      	pop	{r4, pc}
 8004732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800473a:	e7f7      	b.n	800472c <memmove+0x24>

0800473c <memcpy>:
 800473c:	440a      	add	r2, r1
 800473e:	4291      	cmp	r1, r2
 8004740:	f100 33ff 	add.w	r3, r0, #4294967295
 8004744:	d100      	bne.n	8004748 <memcpy+0xc>
 8004746:	4770      	bx	lr
 8004748:	b510      	push	{r4, lr}
 800474a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800474e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004752:	4291      	cmp	r1, r2
 8004754:	d1f9      	bne.n	800474a <memcpy+0xe>
 8004756:	bd10      	pop	{r4, pc}

08004758 <_realloc_r>:
 8004758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800475c:	4680      	mov	r8, r0
 800475e:	4615      	mov	r5, r2
 8004760:	460c      	mov	r4, r1
 8004762:	b921      	cbnz	r1, 800476e <_realloc_r+0x16>
 8004764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004768:	4611      	mov	r1, r2
 800476a:	f7ff bb99 	b.w	8003ea0 <_malloc_r>
 800476e:	b92a      	cbnz	r2, 800477c <_realloc_r+0x24>
 8004770:	f7ff fc9a 	bl	80040a8 <_free_r>
 8004774:	2400      	movs	r4, #0
 8004776:	4620      	mov	r0, r4
 8004778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800477c:	f000 f81a 	bl	80047b4 <_malloc_usable_size_r>
 8004780:	4285      	cmp	r5, r0
 8004782:	4606      	mov	r6, r0
 8004784:	d802      	bhi.n	800478c <_realloc_r+0x34>
 8004786:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800478a:	d8f4      	bhi.n	8004776 <_realloc_r+0x1e>
 800478c:	4629      	mov	r1, r5
 800478e:	4640      	mov	r0, r8
 8004790:	f7ff fb86 	bl	8003ea0 <_malloc_r>
 8004794:	4607      	mov	r7, r0
 8004796:	2800      	cmp	r0, #0
 8004798:	d0ec      	beq.n	8004774 <_realloc_r+0x1c>
 800479a:	42b5      	cmp	r5, r6
 800479c:	462a      	mov	r2, r5
 800479e:	4621      	mov	r1, r4
 80047a0:	bf28      	it	cs
 80047a2:	4632      	movcs	r2, r6
 80047a4:	f7ff ffca 	bl	800473c <memcpy>
 80047a8:	4621      	mov	r1, r4
 80047aa:	4640      	mov	r0, r8
 80047ac:	f7ff fc7c 	bl	80040a8 <_free_r>
 80047b0:	463c      	mov	r4, r7
 80047b2:	e7e0      	b.n	8004776 <_realloc_r+0x1e>

080047b4 <_malloc_usable_size_r>:
 80047b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b8:	1f18      	subs	r0, r3, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bfbc      	itt	lt
 80047be:	580b      	ldrlt	r3, [r1, r0]
 80047c0:	18c0      	addlt	r0, r0, r3
 80047c2:	4770      	bx	lr

080047c4 <_init>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	bf00      	nop
 80047c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ca:	bc08      	pop	{r3}
 80047cc:	469e      	mov	lr, r3
 80047ce:	4770      	bx	lr

080047d0 <_fini>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	bf00      	nop
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr
